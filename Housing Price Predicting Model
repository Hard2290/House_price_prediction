{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hardikharsh/housing-prices-predicting-model?scriptVersionId=259550720\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"ce7e70d3","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-09-02T10:11:39.675803Z","iopub.status.busy":"2025-09-02T10:11:39.675564Z","iopub.status.idle":"2025-09-02T10:12:02.351004Z","shell.execute_reply":"2025-09-02T10:12:02.350289Z"},"papermill":{"duration":22.697213,"end_time":"2025-09-02T10:12:02.352597","exception":false,"start_time":"2025-09-02T10:11:39.655384","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import optuna\n","import matplotlib.pyplot as plt\n","from sklearn import model_selection\n","from category_encoders import CatBoostEncoder\n","from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n","from xgboost import XGBRegressor\n","from sklearn import preprocessing\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.pipeline import make_pipeline\n","from sklearn import metrics\n","from sklearn.base import clone\n","import eli5\n","from eli5.sklearn import PermutationImportance\n","#Disable warnings\n","import sys\n","if not sys.warnoptions:\n","    import warnings\n","    warnings.simplefilter(\"ignore\")"]},{"cell_type":"code","execution_count":2,"id":"79b0e944","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.3907Z","iopub.status.busy":"2025-09-02T10:12:02.390068Z","iopub.status.idle":"2025-09-02T10:12:02.472771Z","shell.execute_reply":"2025-09-02T10:12:02.47184Z"},"papermill":{"duration":0.102886,"end_time":"2025-09-02T10:12:02.474418","exception":false,"start_time":"2025-09-02T10:12:02.371532","status":"completed"},"tags":[]},"outputs":[],"source":["# loading training data\n","df_train = pd.read_csv(\"/kaggle/input/folds-houseprice/houseprice_folds.csv\")\n","df_test = pd.read_csv(\"/kaggle/input/home-data-for-ml-course/test.csv\")\n","submission_ = pd.read_csv(\"/kaggle/input/home-data-for-ml-course/sample_submission.csv\")"]},{"cell_type":"markdown","id":"ea567134","metadata":{"papermill":{"duration":0.017232,"end_time":"2025-09-02T10:12:02.512355","exception":false,"start_time":"2025-09-02T10:12:02.495123","status":"completed"},"tags":[]},"source":["# Handling Missing Values and Outliers"]},{"cell_type":"code","execution_count":3,"id":"840cf709","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.547819Z","iopub.status.busy":"2025-09-02T10:12:02.547576Z","iopub.status.idle":"2025-09-02T10:12:02.584639Z","shell.execute_reply":"2025-09-02T10:12:02.583531Z"},"papermill":{"duration":0.056489,"end_time":"2025-09-02T10:12:02.586057","exception":false,"start_time":"2025-09-02T10:12:02.529568","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["LotFrontage    17.739726\n","MasVnrArea      0.547945\n","GarageYrBlt     5.547945\n","dtype: float64\n","Alley           93.767123\n","MasVnrType      59.726027\n","BsmtQual         2.534247\n","BsmtCond         2.534247\n","BsmtExposure     2.602740\n","BsmtFinType1     2.534247\n","BsmtFinType2     2.602740\n","Electrical       0.068493\n","FireplaceQu     47.260274\n","GarageType       5.547945\n","GarageFinish     5.547945\n","GarageQual       5.547945\n","GarageCond       5.547945\n","PoolQC          99.520548\n","Fence           80.753425\n","MiscFeature     96.301370\n","dtype: float64\n"]}],"source":["#Features with missing values in Train data\n","#Numerical Features\n","missing_cols_train = [col for col in df_train.columns if df_train[col].isnull().any()]\n","numerical_missing_cols_train = [col for col in missing_cols_train if df_train[col].dtype in ['int64','float64']]\n","print((df_train[numerical_missing_cols_train].isnull().sum() / df_train.shape[0]) * 100)\n","#Categorical Features\n","categorical_missing_cols_train = [col for col in missing_cols_train if col not in numerical_missing_cols_train]\n","print((df_train[categorical_missing_cols_train].isnull().sum() / df_train.shape[0]) * 100)"]},{"cell_type":"code","execution_count":4,"id":"2eaa4444","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.622034Z","iopub.status.busy":"2025-09-02T10:12:02.621784Z","iopub.status.idle":"2025-09-02T10:12:02.649255Z","shell.execute_reply":"2025-09-02T10:12:02.648373Z"},"papermill":{"duration":0.046842,"end_time":"2025-09-02T10:12:02.650655","exception":false,"start_time":"2025-09-02T10:12:02.603813","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["LotFrontage     15.558602\n","MasVnrArea       1.028101\n","BsmtFinSF1       0.068540\n","BsmtFinSF2       0.068540\n","BsmtUnfSF        0.068540\n","TotalBsmtSF      0.068540\n","BsmtFullBath     0.137080\n","BsmtHalfBath     0.137080\n","GarageYrBlt      5.346127\n","GarageCars       0.068540\n","GarageArea       0.068540\n","dtype: float64\n","MSZoning         0.274160\n","Alley           92.666210\n","Utilities        0.137080\n","Exterior1st      0.068540\n","Exterior2nd      0.068540\n","MasVnrType      61.274846\n","BsmtQual         3.015764\n","BsmtCond         3.084304\n","BsmtExposure     3.015764\n","BsmtFinType1     2.878684\n","BsmtFinType2     2.878684\n","KitchenQual      0.068540\n","Functional       0.137080\n","FireplaceQu     50.034270\n","GarageType       5.209047\n","GarageFinish     5.346127\n","GarageQual       5.346127\n","GarageCond       5.346127\n","PoolQC          99.794380\n","Fence           80.123372\n","MiscFeature     96.504455\n","SaleType         0.068540\n","dtype: float64\n"]}],"source":["#Features with missing values in Test data\n","#Numerical Features\n","missing_cols_test = [col for col in df_test.columns if df_test[col].isnull().any()]\n","numerical_missing_cols_test = [col for col in missing_cols_test if df_test[col].dtype in ['int64','float64']]\n","print((df_test[numerical_missing_cols_test].isnull().sum() / df_test.shape[0]) * 100)\n","#Categorical Features\n","categorical_missing_cols_test = [col for col in missing_cols_test if col not in numerical_missing_cols_test]\n","print((df_test[categorical_missing_cols_test].isnull().sum() / df_test.shape[0]) * 100)"]},{"cell_type":"markdown","id":"9a2b4d3f","metadata":{"papermill":{"duration":0.016895,"end_time":"2025-09-02T10:12:02.685896","exception":false,"start_time":"2025-09-02T10:12:02.669001","status":"completed"},"tags":[]},"source":["**Handling missing categorical columns**"]},{"cell_type":"code","execution_count":5,"id":"2e553575","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.720718Z","iopub.status.busy":"2025-09-02T10:12:02.720467Z","iopub.status.idle":"2025-09-02T10:12:02.748629Z","shell.execute_reply":"2025-09-02T10:12:02.747981Z"},"papermill":{"duration":0.047014,"end_time":"2025-09-02T10:12:02.749885","exception":false,"start_time":"2025-09-02T10:12:02.702871","status":"completed"},"tags":[]},"outputs":[],"source":["#More than 80% data is missing\n","cat_cols_toremove = [\"Alley\",\"MiscFeature\",\"PoolQC\",\"Fence\"]\n","#More than 40% data is missing\n","df_train[\"FireplaceQu\"] = df_train[\"FireplaceQu\"].fillna(\"missing\")\n","df_train[\"MasVnrType\"] = df_train[\"MasVnrType\"].fillna(\"missing\")\n","df_test[\"FireplaceQu\"] = df_test[\"FireplaceQu\"].fillna(\"missing\")\n","df_test[\"MasVnrType\"] = df_test[\"MasVnrType\"].fillna(\"missing\")\n","#Rest missing categorical columns\n","cat_missing_cols_train = [col for col in categorical_missing_cols_train if col not in cat_cols_toremove + [\"FireplaceQu\", \"MasVnrType\"]]\n","cat_missing_cols_test = [col for col in categorical_missing_cols_test if col not in cat_cols_toremove + [\"FireplaceQu\", \"MasVnrType\"]]\n","\n","for test_feature in cat_missing_cols_test:\n","    #Fit on training data and transform on train and test data\n","    df_test[test_feature] = df_test[test_feature].fillna(df_train[test_feature].mode()[0])    \n","for train_feature in cat_missing_cols_train:\n","    df_train[train_feature] = df_train[train_feature].fillna(df_train[train_feature].mode()[0])"]},{"cell_type":"code","execution_count":6,"id":"0dbbf47e","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.785074Z","iopub.status.busy":"2025-09-02T10:12:02.784868Z","iopub.status.idle":"2025-09-02T10:12:02.7932Z","shell.execute_reply":"2025-09-02T10:12:02.792643Z"},"papermill":{"duration":0.027444,"end_time":"2025-09-02T10:12:02.794547","exception":false,"start_time":"2025-09-02T10:12:02.767103","status":"completed"},"tags":[]},"outputs":[],"source":["df_train = df_train.drop(cat_cols_toremove, axis = 1)\n","df_test = df_test.drop(cat_cols_toremove, axis = 1)"]},{"cell_type":"markdown","id":"e19050cd","metadata":{"papermill":{"duration":0.017628,"end_time":"2025-09-02T10:12:02.830765","exception":false,"start_time":"2025-09-02T10:12:02.813137","status":"completed"},"tags":[]},"source":["**Handling missing numerical columns**"]},{"cell_type":"code","execution_count":7,"id":"a4a4d871","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.867396Z","iopub.status.busy":"2025-09-02T10:12:02.867163Z","iopub.status.idle":"2025-09-02T10:12:02.880991Z","shell.execute_reply":"2025-09-02T10:12:02.880375Z"},"papermill":{"duration":0.033768,"end_time":"2025-09-02T10:12:02.882325","exception":false,"start_time":"2025-09-02T10:12:02.848557","status":"completed"},"tags":[]},"outputs":[],"source":["main_missing_num_cols = [\"LotFrontage\", \"MasVnrArea\", \"GarageYrBlt\"]\n","other_missing_num_cols = [col for col in numerical_missing_cols_test if col not in main_missing_num_cols]\n","for feature in other_missing_num_cols:\n","    df_test[feature] = df_test[feature].fillna(df_train[feature].median())\n","#Features to indicate missing values position (useful in tree-based models)\n","for features_ in main_missing_num_cols:\n","    df_train[features_ + \"_is_missing\"] = np.where(df_train[features_].isnull() == True, 1, 0)\n","    df_test[features_ + \"_is_missing\"] = np.where(df_test[features_].isnull() == True, 1, 0)"]},{"cell_type":"code","execution_count":8,"id":"fa50ca55","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:02.919753Z","iopub.status.busy":"2025-09-02T10:12:02.919506Z","iopub.status.idle":"2025-09-02T10:12:04.158566Z","shell.execute_reply":"2025-09-02T10:12:04.157715Z"},"papermill":{"duration":1.259495,"end_time":"2025-09-02T10:12:04.160237","exception":false,"start_time":"2025-09-02T10:12:02.900742","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7975c8671000>"]},"execution_count":8,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"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HKxevXrpd7/7nY5dUpVxcu75+OOPde211yomJkYmk0krV6702d9SY2LLli269NJLZbPZFBcXp9mzZ5/pS0MLOtk4qa6u1kMPPaT+/fsrNDRUMTExGjNmjPbt2+dzDsbJ2e9U30+Odeedd8pkMunZZ5/12c44Ofs1Zpx8++23uu6662S32xUaGqohQ4YoNzfXu7+1fv8h5GqiZcuWKSMjQzNnztSGDRs0YMAApaWlKT8/39+toZV89NFHuvvuu/X5558rMzNT1dXV+vnPf67S0lJvzf33368333xTy5cv10cffaR9+/bpxhtv9O6vra3ViBEjVFVVpTVr1uiVV17R4sWLNWPGDH9cEs6gL7/8Un/5y1904YUX+mxnjODQoUO65JJLFBgYqHfeeUfffPON5s6dq6ioKG/N7NmzNW/ePC1YsEBr165VaGio0tLSVFFR4a259dZb9fXXXyszM1OrVq3Sxx9/rIkTJ/rjknAGPP3003rhhRf0/PPP69tvv9XTTz+t2bNn67nnnvPWME7OPaWlpRowYIDmz5/f4P6WGBNut1s///nP1b17d61fv15z5szRY489poULF57x60PLONk4KSsr04YNGzR9+nRt2LBBK1as0Pbt23Xdddf51DFOzn6n+n5S79///rc+//xzxcTEHLePcXL2O9U42blzp4YPH66+ffvqww8/1JYtWzR9+nTZbDZvTav9/mOgSYYOHWrcfffd3s9ra2uNmJgYY9asWX7sCv6Un59vSDI++ugjwzAMo6ioyAgMDDSWL1/urfn2228NSUZ2drZhGIbx9ttvG2az2XC5XN6aF154wYiIiDAqKytb9wJwxhw+fNhISEgwMjMzjcsvv9y47777DMNgjKDOQw89ZAwfPvyE+z0ej+F0Oo05c+Z4txUVFRlWq9X4xz/+YRiGYXzzzTeGJOPLL7/01rzzzjuGyWQy9u7de+aaR6sZMWKEcfvtt/tsu/HGG41bb73VMAzGCQxDkvHvf//b+3lLjYn//d//NaKionz+znnooYeM88477wxfEc6En46ThnzxxReGJGP37t2GYTBOzkUnGic//vijERsba2zdutXo3r278ac//cm7j3Fy7mlonIwcOdL49a9/fcJjWvP3H2ZyNUFVVZXWr1+v1NRU7zaz2azU1FRlZ2f7sTP4U3FxsSSpQ4cOkqT169erurraZ5z07dtX3bp1846T7Oxs9e/fXw6Hw1uTlpYmt9utr7/+uhW7x5l09913a8SIET5jQWKMoM4bb7yhwYMH65ZbblGXLl00cOBAvfjii979OTk5crlcPuPEbrcrOTnZZ5xERkZq8ODB3prU1FSZzWatXbu29S4GZ8ywYcOUlZWl7777TpK0efNmffrpp/rFL34hiXGC47XUmMjOztZll12moKAgb01aWpq2b9+uQ4cOtdLVoDUVFxfLZDIpMjJSEuMEdTwej2677TY9+OCDuuCCC47bzziBx+PRW2+9pT59+igtLU1dunRRcnKyzy2Nrfn7DyFXExQUFKi2ttbniy5JDodDLpfLT13BnzwejyZPnqxLLrlEiYmJkiSXy6WgoCDvDwj1jh0nLperwXFUvw/t39KlS7VhwwbNmjXruH2MEUjSDz/8oBdeeEEJCQl69913ddddd+nee+/VK6+8Iunon/PJ/s5xuVzq0qWLz36LxaIOHTowTs4SDz/8sEaNGqW+ffsqMDBQAwcO1OTJk3XrrbdKYpzgeC01Jvh76NxSUVGhhx56SKNHj1ZERIQkxgnqPP3007JYLLr33nsb3M84QX5+vkpKSvTUU0/p6quv1nvvvacbbrhBN954oz766CNJrfv7j+U0rgU45919993aunWrPv30U3+3gjZkz549uu+++5SZmelzHzpwLI/Ho8GDB+sPf/iDJGngwIHaunWrFixYoLFjx/q5O7QV//znP/Xaa69pyZIluuCCC7Rp0yZNnjxZMTExjBMALaK6ulq/+tWvZBiGXnjhBX+3gzZk/fr1+vOf/6wNGzbIZDL5ux20UR6PR5J0/fXX6/7775ckJSUlac2aNVqwYIEuv/zyVu2HmVxN0KlTJwUEBBz3DgB5eXlyOp1+6gr+MmnSJK1atUoffPCBunbt6t3udDpVVVWloqIin/pjx4nT6WxwHNXvQ/u2fv165efn66KLLpLFYpHFYtFHH32kefPmyWKxyOFwMEag6Oho9evXz2fb+eef730Xmvo/55P9neN0Oo9745OamhoVFhYyTs4SDz74oHc2V//+/XXbbbfp/vvv984SZZzgp1pqTPD30LmhPuDavXu3MjMzvbO4JMYJpE8++UT5+fnq1q2b92fa3bt364EHHlCPHj0kMU5Ql5NYLJZT/lzbWr//EHI1QVBQkAYNGqSsrCzvNo/Ho6ysLKWkpPixM7QmwzA0adIk/fvf/9b777+v+Ph4n/2DBg1SYGCgzzjZvn27cnNzveMkJSVFX331lc9fCPU/WPz0mwPan6uuukpfffWVNm3a5H0MHjxYt956q/djxgguueQSbd++3Wfbd999p+7du0uS4uPj5XQ6fcaJ2+3W2rVrfcZJUVGR1q9f7615//335fF4lJyc3ApXgTOtrKxMZrPvj2sBAQHefzVlnOCnWmpMpKSk6OOPP1Z1dbW3JjMzU+edd57Pu8Ci/aoPuHbs2KH//Oc/6tixo89+xgluu+02bdmyxedn2piYGD344IN69913JTFOUJeTDBky5KQ/17bq78iNXqIehmEYxtKlSw2r1WosXrzY+Oabb4yJEycakZGRPu8AgLPbXXfdZdjtduPDDz809u/f732UlZV5a+68806jW7duxvvvv2+sW7fOSElJMVJSUrz7a2pqjMTEROPnP/+5sWnTJmP16tVG586djWnTpvnjktAKjn13RcNgjKDuXawsFovx+9//3tixY4fx2muvGSEhIcbf//53b81TTz1lREZGGv/3f/9nbNmyxbj++uuN+Ph4o7y83Ftz9dVXGwMHDjTWrl1rfPrpp0ZCQoIxevRof1wSzoCxY8casbGxxqpVq4ycnBxjxYoVRqdOnYypU6d6axgn557Dhw8bGzduNDZu3GhIMp555hlj48aN3nfFa4kxUVRUZDgcDuO2224ztm7daixdutQICQkx/vKXv7T69aJ5TjZOqqqqjOuuu87o2rWrsWnTJp+faY99FzPGydnvVN9Pfuqn765oGIyTc8GpxsmKFSuMwMBAY+HChcaOHTuM5557zggICDA++eQT7zla6/cfQq5meO6554xu3boZQUFBxtChQ43PP//c3y2hFUlq8LFo0SJvTXl5ufHf//3fRlRUlBESEmLccMMNxv79+33Os2vXLuMXv/iFERwcbHTq1Ml44IEHjOrq6la+GrSWn4ZcjBEYhmG8+eabRmJiomG1Wo2+ffsaCxcu9Nnv8XiM6dOnGw6Hw7BarcZVV11lbN++3afm4MGDxujRo42wsDAjIiLCGD9+vHH48OHWvAycQW6327jvvvuMbt26GTabzejZs6fxP//zPz6/hDJOzj0ffPBBgz+LjB071jCMlhsTmzdvNoYPH25YrVYjNjbWeOqpp1rrEtEC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\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#Plotting distribution of Missing Numerical columns for train data\n","#LotFrontage Feature\n","a = sns.FacetGrid(df_train, aspect=4)\n","a.map(sns.kdeplot, \"LotFrontage\", shade=True)\n","a.set(xlim=(0, df_train[\"LotFrontage\"].max()))\n","a.add_legend()\n","#MasVnrArea Feature\n","a = sns.FacetGrid(df_train, aspect=4)\n","a.map(sns.kdeplot, \"MasVnrArea\", shade=True)\n","a.set(xlim=(0, df_train[\"MasVnrArea\"].max()))\n","a.add_legend()\n","#GarageYrBlt Feature\n","a = sns.FacetGrid(df_train, aspect=4)\n","a.map(sns.kdeplot, \"GarageYrBlt\", shade=True)\n","a.set(xlim=(0, df_train[\"GarageYrBlt\"].max()))\n","a.add_legend()"]},{"cell_type":"code","execution_count":9,"id":"54e581de","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:04.201579Z","iopub.status.busy":"2025-09-02T10:12:04.201296Z","iopub.status.idle":"2025-09-02T10:12:05.314775Z","shell.execute_reply":"2025-09-02T10:12:05.313817Z"},"papermill":{"duration":1.135102,"end_time":"2025-09-02T10:12:05.316306","exception":false,"start_time":"2025-09-02T10:12:04.181204","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7975c8671d20>"]},"execution_count":9,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1211.11x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#Plotting distribution of Missing Numerical columns for test data\n","#LotFrontage Feature\n","a = sns.FacetGrid(df_test, aspect=4)\n","a.map(sns.kdeplot, \"LotFrontage\", shade=True)\n","a.set(xlim=(0, df_test[\"LotFrontage\"].max()))\n","a.add_legend()\n","#MasVnrArea Feature\n","a = sns.FacetGrid(df_test, aspect=4)\n","a.map(sns.kdeplot, \"MasVnrArea\", shade=True)\n","a.set(xlim=(0, df_test[\"MasVnrArea\"].max()))\n","a.add_legend()\n","#GarageYrBlt Feature\n","a = sns.FacetGrid(df_test, aspect=4)\n","a.map(sns.kdeplot, \"GarageYrBlt\", shade=True)\n","a.set(xlim=(0, df_test[\"GarageYrBlt\"].max()))\n","a.add_legend()"]},{"cell_type":"code","execution_count":10,"id":"0ae06ce4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:05.359252Z","iopub.status.busy":"2025-09-02T10:12:05.359024Z","iopub.status.idle":"2025-09-02T10:12:05.36533Z","shell.execute_reply":"2025-09-02T10:12:05.364764Z"},"papermill":{"duration":0.028076,"end_time":"2025-09-02T10:12:05.366433","exception":false,"start_time":"2025-09-02T10:12:05.338357","status":"completed"},"tags":[]},"outputs":[],"source":["#Since MasVnrArea and GarageYrBlt have skewed distribution in both train and test data, so using median imputation\n","df_train[\"MasVnrArea\"] = df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].median())\n","df_train[\"GarageYrBlt\"] = df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].median())\n","df_test[\"MasVnrArea\"] = df_test[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].median())\n","df_test[\"GarageYrBlt\"] = df_test[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].median())"]},{"cell_type":"code","execution_count":11,"id":"108bdcbc","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:05.407722Z","iopub.status.busy":"2025-09-02T10:12:05.4075Z","iopub.status.idle":"2025-09-02T10:12:05.791376Z","shell.execute_reply":"2025-09-02T10:12:05.790408Z"},"papermill":{"duration":0.406154,"end_time":"2025-09-02T10:12:05.792671","exception":false,"start_time":"2025-09-02T10:12:05.386517","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'LotFrontage_test')"]},"execution_count":11,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 600x400 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 600x400 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#plotting boxplot to identify outliers' presence\n","#Train data\n","plt.figure(figsize=(6,4))\n","sns.boxplot(df_train.LotFrontage)\n","plt.title(\"LotFrontage_train\")\n","#Test data\n","plt.figure(figsize=(6,4))\n","sns.boxplot(df_test.LotFrontage)\n","plt.title(\"LotFrontage_test\")"]},{"cell_type":"markdown","id":"940df393","metadata":{"papermill":{"duration":0.020893,"end_time":"2025-09-02T10:12:05.835204","exception":false,"start_time":"2025-09-02T10:12:05.814311","status":"completed"},"tags":[]},"source":["According to Boxplot, LotFrontage feature has outliers, so restrict its values within range of 2 * Standard deviation (sigma)."]},{"cell_type":"code","execution_count":12,"id":"42ad00e0","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:05.878633Z","iopub.status.busy":"2025-09-02T10:12:05.878329Z","iopub.status.idle":"2025-09-02T10:12:05.886158Z","shell.execute_reply":"2025-09-02T10:12:05.885276Z"},"papermill":{"duration":0.031487,"end_time":"2025-09-02T10:12:05.887572","exception":false,"start_time":"2025-09-02T10:12:05.856085","status":"completed"},"tags":[]},"outputs":[],"source":["#For Train data\n","#Fitting on training data\n","lower_bound = df_train[\"LotFrontage\"].mean() - 2 * df_train[\"LotFrontage\"].std()\n","upper_bound = df_train[\"LotFrontage\"].mean() + 2 * df_train[\"LotFrontage\"].std()\n","#Transforming training data\n","df_train.loc[df_train.LotFrontage > upper_bound, \"LotFrontage\"] = upper_bound\n","df_train.loc[df_train.LotFrontage < lower_bound, \"LotFrontage\"] = lower_bound\n","\n","#For test data\n","#Only Transforming test data after fitting on training data\n","df_test.loc[df_test.LotFrontage > upper_bound, \"LotFrontage\"] = upper_bound\n","df_test.loc[df_test.LotFrontage < lower_bound, \"LotFrontage\"] = lower_bound"]},{"cell_type":"code","execution_count":13,"id":"7ae46ac1","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:05.931239Z","iopub.status.busy":"2025-09-02T10:12:05.931019Z","iopub.status.idle":"2025-09-02T10:12:05.936142Z","shell.execute_reply":"2025-09-02T10:12:05.935422Z"},"papermill":{"duration":0.027992,"end_time":"2025-09-02T10:12:05.937361","exception":false,"start_time":"2025-09-02T10:12:05.909369","status":"completed"},"tags":[]},"outputs":[],"source":["#Mean Imputation of LotFrontage Feature as it has approximately normal distribution\n","df_train[\"LotFrontage_mean\"] = np.where(df_train[\"LotFrontage\"].isnull(), df_train[\"LotFrontage\"].mean(), df_train[\"LotFrontage\"])\n","df_test[\"LotFrontage_mean\"] = np.where(df_test[\"LotFrontage\"].isnull(), df_train[\"LotFrontage\"].mean(), df_test[\"LotFrontage\"])\n","#Feature to indicate missing values in LotFrontage"]},{"cell_type":"code","execution_count":14,"id":"92fc3eba","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:05.979719Z","iopub.status.busy":"2025-09-02T10:12:05.979483Z","iopub.status.idle":"2025-09-02T10:12:05.985116Z","shell.execute_reply":"2025-09-02T10:12:05.984529Z"},"papermill":{"duration":0.028088,"end_time":"2025-09-02T10:12:05.986299","exception":false,"start_time":"2025-09-02T10:12:05.958211","status":"completed"},"tags":[]},"outputs":[],"source":["#Numerical columns\n","num_cols = [col for col in df_train.columns if df_train[col].dtype in ['int64', 'float64']]\n","#Categorical columns\n","cat_cols = [col for col in df_train.columns if col not in num_cols]\n","high_cardinality_cat_cols = [\"Neighborhood\",\"Exterior1st\",\"Exterior2nd\"]\n","low_cardinality_cat_cols = [col for col in cat_cols if col not in high_cardinality_cat_cols]"]},{"cell_type":"markdown","id":"ba76922a","metadata":{"papermill":{"duration":0.02079,"end_time":"2025-09-02T10:12:06.0284","exception":false,"start_time":"2025-09-02T10:12:06.00761","status":"completed"},"tags":[]},"source":["# Predicting missing values of LotFrontage Feature"]},{"cell_type":"code","execution_count":15,"id":"69410947","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.071234Z","iopub.status.busy":"2025-09-02T10:12:06.070982Z","iopub.status.idle":"2025-09-02T10:12:06.076488Z","shell.execute_reply":"2025-09-02T10:12:06.075876Z"},"papermill":{"duration":0.028557,"end_time":"2025-09-02T10:12:06.077783","exception":false,"start_time":"2025-09-02T10:12:06.049226","status":"completed"},"tags":[]},"outputs":[],"source":["data = df_train.drop([\"SalePrice\", \"kfold\"], axis = 1)"]},{"cell_type":"code","execution_count":16,"id":"2457a9c1","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.122173Z","iopub.status.busy":"2025-09-02T10:12:06.121934Z","iopub.status.idle":"2025-09-02T10:12:06.137347Z","shell.execute_reply":"2025-09-02T10:12:06.136484Z"},"papermill":{"duration":0.038682,"end_time":"2025-09-02T10:12:06.138862","exception":false,"start_time":"2025-09-02T10:12:06.10018","status":"completed"},"tags":[]},"outputs":[],"source":["#Train and test for LotFrontage from original train data\n","train = data.dropna()\n","test = data[pd.isnull(data.LotFrontage)]\n","#Train and test for LotFrontage from original test data\n","train_t = df_test.dropna()\n","test_t = df_test[pd.isnull(df_test.LotFrontage)]"]},{"cell_type":"code","execution_count":17,"id":"8fe75008","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.182143Z","iopub.status.busy":"2025-09-02T10:12:06.181885Z","iopub.status.idle":"2025-09-02T10:12:06.189586Z","shell.execute_reply":"2025-09-02T10:12:06.188696Z"},"papermill":{"duration":0.030724,"end_time":"2025-09-02T10:12:06.19104","exception":false,"start_time":"2025-09-02T10:12:06.160316","status":"completed"},"tags":[]},"outputs":[],"source":["#Creating Folds\n","train[\"kf\"] = -1\n","kf = model_selection.KFold(n_splits = 10, shuffle = True, random_state = 8)\n","for fold, (train_idx, valid_idx) in enumerate(kf.split(X = train)):\n","    train.iloc[valid_idx, train.columns.get_loc(\"kf\")] = fold\n","train[\"kf\"] = train[\"kf\"].astype(int)"]},{"cell_type":"markdown","id":"0118ef1b","metadata":{"papermill":{"duration":0.020936,"end_time":"2025-09-02T10:12:06.232923","exception":false,"start_time":"2025-09-02T10:12:06.211987","status":"completed"},"tags":[]},"source":["**One-Hot Encoding for Low Cardinality Categorical Columns**"]},{"cell_type":"code","execution_count":18,"id":"04c4547d","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.275623Z","iopub.status.busy":"2025-09-02T10:12:06.27532Z","iopub.status.idle":"2025-09-02T10:12:06.283025Z","shell.execute_reply":"2025-09-02T10:12:06.282362Z"},"papermill":{"duration":0.030578,"end_time":"2025-09-02T10:12:06.284361","exception":false,"start_time":"2025-09-02T10:12:06.253783","status":"completed"},"tags":[]},"outputs":[],"source":["#One-Hot Encoding for low cardinality categorical columns\n","train_onehot = train.copy()\n","test_onehot = test.copy()\n","test_t_onehot = test_t.copy()"]},{"cell_type":"code","execution_count":19,"id":"5b2a9ee4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.330394Z","iopub.status.busy":"2025-09-02T10:12:06.330134Z","iopub.status.idle":"2025-09-02T10:12:06.415956Z","shell.execute_reply":"2025-09-02T10:12:06.415052Z"},"papermill":{"duration":0.110752,"end_time":"2025-09-02T10:12:06.417531","exception":false,"start_time":"2025-09-02T10:12:06.306779","status":"completed"},"tags":[]},"outputs":[],"source":["train_dummies = pd.get_dummies(train[low_cardinality_cat_cols], drop_first = True, dtype = int)\n","train_onehot = pd.concat([train_onehot, train_dummies], axis = 1)\n","test_dummies = pd.get_dummies(test[low_cardinality_cat_cols], drop_first = True, dtype = int)\n","test_t_dummies = pd.get_dummies(test_t[low_cardinality_cat_cols], drop_first = True, dtype = int)\n","\n","#aligning categories in test in accordance with train\n","test_dummies = test_dummies.reindex(columns = train_dummies.columns, fill_value = 0)\n","test_t_dummies = test_t_dummies.reindex(columns = train_dummies.columns, fill_value = 0)\n","test_onehot = pd.concat([test_onehot, test_dummies], axis = 1)\n","test_t_onehot = pd.concat([test_t_onehot, test_t_dummies], axis = 1)"]},{"cell_type":"code","execution_count":20,"id":"5b34fe03","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.462587Z","iopub.status.busy":"2025-09-02T10:12:06.462304Z","iopub.status.idle":"2025-09-02T10:12:06.467858Z","shell.execute_reply":"2025-09-02T10:12:06.467243Z"},"papermill":{"duration":0.029113,"end_time":"2025-09-02T10:12:06.469072","exception":false,"start_time":"2025-09-02T10:12:06.439959","status":"completed"},"tags":[]},"outputs":[],"source":["train_onehot = train_onehot.drop(low_cardinality_cat_cols, axis = 1)\n","test_onehot = test_onehot.drop(low_cardinality_cat_cols, axis = 1)\n","test_t_onehot = test_t_onehot.drop(low_cardinality_cat_cols, axis = 1)"]},{"cell_type":"markdown","id":"eb2d1e0a","metadata":{"papermill":{"duration":0.022138,"end_time":"2025-09-02T10:12:06.511925","exception":false,"start_time":"2025-09-02T10:12:06.489787","status":"completed"},"tags":[]},"source":["**CatBoost Encoding  for High Cardinality Categorical Columns**"]},{"cell_type":"code","execution_count":21,"id":"462325f2","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.554188Z","iopub.status.busy":"2025-09-02T10:12:06.553963Z","iopub.status.idle":"2025-09-02T10:12:06.560942Z","shell.execute_reply":"2025-09-02T10:12:06.560258Z"},"papermill":{"duration":0.029538,"end_time":"2025-09-02T10:12:06.562123","exception":false,"start_time":"2025-09-02T10:12:06.532585","status":"completed"},"tags":[]},"outputs":[],"source":["#CatBoost Encoding for high cardinality categorical columns\n","X_train = train_onehot.drop([\"LotFrontage\"], axis = 1)\n","Y_train = train_onehot[[\"LotFrontage\" ,\"kf\"]]\n","X_test = test_onehot.copy()\n","X_test_t = test_t_onehot.copy()\n","train_parts = []\n","test_parts = []\n","test_t_parts = []\n","required_cols = [col for col in X_train.columns if col not in [\"kf\"]]"]},{"cell_type":"code","execution_count":22,"id":"3adfac00","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:06.604832Z","iopub.status.busy":"2025-09-02T10:12:06.60462Z","iopub.status.idle":"2025-09-02T10:12:07.054318Z","shell.execute_reply":"2025-09-02T10:12:07.053629Z"},"papermill":{"duration":0.472863,"end_time":"2025-09-02T10:12:07.055871","exception":false,"start_time":"2025-09-02T10:12:06.583008","status":"completed"},"tags":[]},"outputs":[],"source":["for fold in range(10):\n","    xtrain = X_train.loc[X_train.kf != fold]\n","    ytrain = Y_train.loc[Y_train.kf != fold, \"LotFrontage\"]\n","    xvalid = X_train.loc[X_train.kf == fold]\n","\n","    for c in high_cardinality_cat_cols:\n","        xtrain[c] = xtrain[c].astype(str)\n","        xvalid[c] = xvalid[c].astype(str)\n","\n","    xtrain = xtrain[required_cols]\n","    xvalid = xvalid[required_cols]\n","    #Fit encoder on train folds only\n","    cbe = CatBoostEncoder(cols = high_cardinality_cat_cols, return_df = True)\n","    cbe.fit(xtrain[high_cardinality_cat_cols], ytrain)\n","\n","    #Transforming xtrain, xvalid and xtest\n","    xtrain_enc = xtrain.copy()\n","    xvalid_enc = xvalid.copy()\n","    xtest_enc = X_test.copy()\n","    xtest_t_enc = X_test_t.copy()\n","\n","    xtrain_enc = cbe.transform(xtrain[high_cardinality_cat_cols])\n","    xvalid_enc = cbe.transform(xvalid[high_cardinality_cat_cols])\n","    xtest_enc = cbe.transform(X_test[high_cardinality_cat_cols])\n","    xtest_t_enc = cbe.transform(X_test_t[high_cardinality_cat_cols])\n","\n","    #Keeping Out-of-Fold (OOF),i.e., validation data only\n","    train_parts.append(xvalid_enc)\n","    test_parts.append(xtest_enc[high_cardinality_cat_cols])\n","    test_t_parts.append(xtest_t_enc[high_cardinality_cat_cols])\n","\n","#sort_index() reorders rows by their index so it lines back up with the original training DataFrame\n","train_cbe_oof = pd.concat(train_parts).sort_index()\n","\n","test_cbe_mean = pd.concat(test_parts, axis = 1)\n","test_t_cbe_mean = pd.concat(test_t_parts, axis = 1)\n","#Averaging 10 copies (since used 10 folds) of each columns\n","test_cbe = test_cbe_mean.T.groupby(level = 0).mean().T\n","test_t_cbe = test_t_cbe_mean.T.groupby(level = 0).mean().T\n","#Puts columns back in original order\n","test_cbe = test_cbe[high_cardinality_cat_cols]\n","test_t_cbe = test_t_cbe[high_cardinality_cat_cols]"]},{"cell_type":"code","execution_count":23,"id":"497f0b28","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.100024Z","iopub.status.busy":"2025-09-02T10:12:07.099716Z","iopub.status.idle":"2025-09-02T10:12:07.112211Z","shell.execute_reply":"2025-09-02T10:12:07.111373Z"},"papermill":{"duration":0.035839,"end_time":"2025-09-02T10:12:07.11356","exception":false,"start_time":"2025-09-02T10:12:07.077721","status":"completed"},"tags":[]},"outputs":[],"source":["train_cbe_final = X_train.drop(columns = high_cardinality_cat_cols).merge(train_cbe_oof[high_cardinality_cat_cols], left_index = True, right_index = True, how = 'left')\n","test_cbe_final = X_test.drop(columns = high_cardinality_cat_cols).merge(test_cbe[high_cardinality_cat_cols], left_index = True, right_index = True, how = 'left')\n","test_t_cbe_final = X_test_t.drop(columns = high_cardinality_cat_cols).merge(test_t_cbe[high_cardinality_cat_cols], left_index = True, right_index = True, how = 'left')"]},{"cell_type":"code","execution_count":24,"id":"c2c0729d","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.156143Z","iopub.status.busy":"2025-09-02T10:12:07.155906Z","iopub.status.idle":"2025-09-02T10:12:07.159889Z","shell.execute_reply":"2025-09-02T10:12:07.159008Z"},"papermill":{"duration":0.026679,"end_time":"2025-09-02T10:12:07.161076","exception":false,"start_time":"2025-09-02T10:12:07.134397","status":"completed"},"tags":[]},"outputs":[],"source":["#Putting back LotFrontage in training data\n","y__train = Y_train[\"LotFrontage\"]\n","train_cbe_final[\"LotFrontage\"] = y__train"]},{"cell_type":"code","execution_count":25,"id":"81b50251","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.205534Z","iopub.status.busy":"2025-09-02T10:12:07.205267Z","iopub.status.idle":"2025-09-02T10:12:07.210458Z","shell.execute_reply":"2025-09-02T10:12:07.209531Z"},"papermill":{"duration":0.029777,"end_time":"2025-09-02T10:12:07.211748","exception":false,"start_time":"2025-09-02T10:12:07.181971","status":"completed"},"tags":[]},"outputs":[],"source":["final_train = train_cbe_final.copy()\n","final_test = test_cbe_final.copy()\n","final_test_t = test_t_cbe_final.copy()"]},{"cell_type":"code","execution_count":26,"id":"18dda621","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.256208Z","iopub.status.busy":"2025-09-02T10:12:07.255995Z","iopub.status.idle":"2025-09-02T10:12:07.260656Z","shell.execute_reply":"2025-09-02T10:12:07.259822Z"},"papermill":{"duration":0.028135,"end_time":"2025-09-02T10:12:07.261902","exception":false,"start_time":"2025-09-02T10:12:07.233767","status":"completed"},"tags":[]},"outputs":[],"source":["def separate(train, test, test_t):\n","    train.columns = train.columns.astype(str)\n","    test.columns = test.columns.astype(str)\n","    test_t.columns = test_t.columns.astype(str)\n","    X = train.drop([\"LotFrontage\"], axis = 1)\n","    y = train[[\"LotFrontage\", \"kf\"]]\n","    return X, y, test, test_t\n","    \n","def cols_to_consider(data):\n","    cols = [col for col in data.columns if col not in [\"kf\", \"Id\"]]\n","    data = data[cols]\n","    return data"]},{"cell_type":"markdown","id":"05239e47","metadata":{"papermill":{"duration":0.021393,"end_time":"2025-09-02T10:12:07.305288","exception":false,"start_time":"2025-09-02T10:12:07.283895","status":"completed"},"tags":[]},"source":["**1. Random Forest**"]},{"cell_type":"code","execution_count":27,"id":"1bd51216","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.348954Z","iopub.status.busy":"2025-09-02T10:12:07.34873Z","iopub.status.idle":"2025-09-02T10:12:07.355106Z","shell.execute_reply":"2025-09-02T10:12:07.354467Z"},"papermill":{"duration":0.029767,"end_time":"2025-09-02T10:12:07.356316","exception":false,"start_time":"2025-09-02T10:12:07.326549","status":"completed"},"tags":[]},"outputs":[],"source":["def random_forest(X, y):\n","    n_estimators_ = [300, 500, 1000, 2000]\n","    max_depths = [2, 5, 10, 20]\n","    min_samples_splits = [2, 5, 10]\n","\n","    best_score = np.inf\n","    best_params = {}\n","\n","    for n_estimators in n_estimators_:\n","        for max_depth in max_depths:\n","            for min_samples_split in min_samples_splits:\n","                scores = []\n","                for fold in range(10):\n","                    xtrain = X.loc[X.kf != fold]\n","                    ytrain = y.loc[y.kf != fold]\n","\n","                    xvalid = X.loc[X.kf == fold]\n","                    yvalid = y.loc[y.kf == fold]\n","\n","                    xtrain = cols_to_consider(xtrain)\n","                    ytrain = cols_to_consider(ytrain)\n","                    xvalid = cols_to_consider(xvalid)\n","                    yvalid = cols_to_consider(yvalid)\n","\n","                    model = RandomForestRegressor(n_estimators = n_estimators, min_samples_split = min_samples_split, max_depth = max_depth, n_jobs = -1, random_state = fold)\n","                    model.fit(xtrain, ytrain)\n","                    preds = model.predict(xvalid)\n","                    score = metrics.mean_absolute_error(yvalid, preds)\n","                    scores.append(score)\n","                avg_score = np.mean(scores)\n","                if avg_score < best_score: #Minimize error\n","                    best_score = avg_score\n","                    best_params = {\"n_estimators\" : n_estimators, \"min_samples_split\" : min_samples_split, \"max_depth\" : max_depth}\n","    return best_score, best_params"]},{"cell_type":"markdown","id":"2b9f96d1","metadata":{"papermill":{"duration":0.020775,"end_time":"2025-09-02T10:12:07.398884","exception":false,"start_time":"2025-09-02T10:12:07.378109","status":"completed"},"tags":[]},"source":["**2. KNN**"]},{"cell_type":"code","execution_count":28,"id":"23b7e8be","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.441872Z","iopub.status.busy":"2025-09-02T10:12:07.441646Z","iopub.status.idle":"2025-09-02T10:12:07.447569Z","shell.execute_reply":"2025-09-02T10:12:07.446783Z"},"papermill":{"duration":0.028538,"end_time":"2025-09-02T10:12:07.44884","exception":false,"start_time":"2025-09-02T10:12:07.420302","status":"completed"},"tags":[]},"outputs":[],"source":["def knn_(X, y):\n","    kneighborsregressor__n_neighbors = [3, 5, 7, 9, 15, 20, 30]\n","    kneighborsregressor__weights = [\"uniform\", \"distance\"]\n","    kneighborsregressor__metric = [\"minkowski\"]\n","    kneighborsregressor__p = [1, 2]\n","\n","    best_score = np.inf\n","    best_params = {}\n","\n","    for n_neighbors in kneighborsregressor__n_neighbors:\n","        for weights in kneighborsregressor__weights:\n","            for p in kneighborsregressor__p:\n","                scores = []\n","                for fold in range(10):\n","                    xtrain = X.loc[X.kf != fold]\n","                    ytrain = y.loc[y.kf != fold]\n","\n","                    xvalid = X.loc[X.kf == fold]\n","                    yvalid = y.loc[y.kf == fold]\n","\n","                    xtrain = cols_to_consider(xtrain)\n","                    ytrain = cols_to_consider(ytrain)\n","                    xvalid = cols_to_consider(xvalid)\n","                    yvalid = cols_to_consider(yvalid)\n","\n","                    model = make_pipeline(preprocessing.StandardScaler(), KNeighborsRegressor())\n","                    model.set_params(kneighborsregressor__n_neighbors = n_neighbors, kneighborsregressor__weights = weights, kneighborsregressor__p = p)\n","                    model.fit(xtrain, ytrain)\n","                    preds = model.predict(xvalid)\n","                    score = metrics.mean_absolute_error(yvalid, preds)\n","                    scores.append(score)\n","                avg_score = np.mean(scores)\n","                if avg_score < best_score: #Minimize error\n","                    best_score = avg_score\n","                    best_params = {\"kneighborsregressor__n_neighbors\" : n_neighbors, \"kneighborsregressor__weights\" : weights, \"kneighborsregressor__p\" : p}\n","    return best_score, best_params"]},{"cell_type":"markdown","id":"ecca1e57","metadata":{"papermill":{"duration":0.020891,"end_time":"2025-09-02T10:12:07.490769","exception":false,"start_time":"2025-09-02T10:12:07.469878","status":"completed"},"tags":[]},"source":["**3. Gradient Boosting**"]},{"cell_type":"code","execution_count":29,"id":"b5c45b40","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.534807Z","iopub.status.busy":"2025-09-02T10:12:07.53459Z","iopub.status.idle":"2025-09-02T10:12:07.540322Z","shell.execute_reply":"2025-09-02T10:12:07.539694Z"},"papermill":{"duration":0.028291,"end_time":"2025-09-02T10:12:07.541505","exception":false,"start_time":"2025-09-02T10:12:07.513214","status":"completed"},"tags":[]},"outputs":[],"source":["def gradient_boosting(X, y):\n","    max_depths = [2, 4, 10, 15]\n","    n_estimators_ = [100, 200, 500, 1000]\n","    min_samples_splits = [2, 5, 10]\n","\n","    best_score = np.inf\n","    best_params = {}\n","\n","    for n_estimators in n_estimators_:\n","        for max_depth in max_depths:\n","            for min_samples_split in min_samples_splits:\n","                scores = []\n","                for fold in range(10):\n","                    xtrain = X.loc[X.kf != fold]\n","                    ytrain = y.loc[y.kf != fold]\n","\n","                    xvalid = X.loc[X.kf == fold]\n","                    yvalid = y.loc[y.kf == fold]\n","\n","                    xtrain = cols_to_consider(xtrain)\n","                    ytrain = cols_to_consider(ytrain)\n","                    xvalid = cols_to_consider(xvalid)\n","                    yvalid = cols_to_consider(yvalid)\n","\n","                    model = GradientBoostingRegressor(n_estimators = n_estimators, min_samples_split = min_samples_split, max_depth = max_depth, random_state = fold)\n","                    model.fit(xtrain, ytrain)\n","                    preds = model.predict(xvalid)\n","                    score = metrics.mean_absolute_error(yvalid, preds)\n","                    scores.append(score)\n","                avg_score = np.mean(scores)\n","                if avg_score < best_score: #Minimize error\n","                    best_score = avg_score\n","                    best_params = {\"n_estimators\" : n_estimators, \"min_samples_split\" : min_samples_split, \"max_depth\" : max_depth}\n","    return best_score, best_params"]},{"cell_type":"code","execution_count":30,"id":"a3ce40de","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.583558Z","iopub.status.busy":"2025-09-02T10:12:07.583318Z","iopub.status.idle":"2025-09-02T10:12:07.588013Z","shell.execute_reply":"2025-09-02T10:12:07.587385Z"},"papermill":{"duration":0.026981,"end_time":"2025-09-02T10:12:07.589161","exception":false,"start_time":"2025-09-02T10:12:07.56218","status":"completed"},"tags":[]},"outputs":[],"source":["Xtrain_impute, ytrain_impute, test_impute, test_t_impute = separate(final_train, final_test, final_test_t)\n","#best_params_RF, best_score_RF = random_forest(Xtrain_impute, ytrain_impute)\n","#best_params_knn, best_score_knn = knn_(Xtrain_impute, ytrain_impute)\n","#best_params_GB, best_score_GB = gradient_boosting(Xtrain_impute, ytrain_impute)\n","\n","#print(best_params_RF, best_score_RF)\n","#print(best_params_knn, best_score_knn)\n","#print(best_params_GB, best_score_GB)"]},{"cell_type":"markdown","id":"3446ca4d","metadata":{"papermill":{"duration":0.021915,"end_time":"2025-09-02T10:12:07.632309","exception":false,"start_time":"2025-09-02T10:12:07.610394","status":"completed"},"tags":[]},"source":["Best Paramters along with best score obtained are:\n","\n","**1. Random Forest Regressor(0.043991080810687457) :** \n","\n","   {'n_estimators': 1000, 'min_samples_split': 5, 'max_depth': 20}\n","\n","**2. KNeighbors Regressor (9.831439638635278) :**\n","\n"," {'kneighborsregressor__n_neighbors': 7, 'kneighborsregressor__weights': 'distance', 'kneighborsregressor__p': 1}\n","\n","**3. Gradient Boosting Regressor (0.009886122758428605) :**\n","\n"," {'n_estimators': 1000, 'min_samples_split': 10, 'max_depth': 4}"]},{"cell_type":"code","execution_count":31,"id":"f277af0b","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.67486Z","iopub.status.busy":"2025-09-02T10:12:07.674633Z","iopub.status.idle":"2025-09-02T10:12:07.679917Z","shell.execute_reply":"2025-09-02T10:12:07.679097Z"},"papermill":{"duration":0.027835,"end_time":"2025-09-02T10:12:07.681085","exception":false,"start_time":"2025-09-02T10:12:07.65325","status":"completed"},"tags":[]},"outputs":[],"source":["def final_test_preds(X, y, test, test_t, model):\n","    final_preds = []\n","    final_preds_t = []\n","    test_col = [col for col in test.columns if col not in [\"Id\", \"LotFrontage\"]]\n","\n","    for fold in range(10):\n","        xtrain = X.loc[X.kf != fold]\n","        ytrain = y.loc[y.kf != fold]\n","\n","        xtrain = cols_to_consider(xtrain)\n","        ytrain = cols_to_consider(ytrain)\n","        xtest = test.copy()\n","        xtest_t = test_t.copy()\n","        xtest = xtest[test_col]\n","        xtest_t = xtest_t[test_col]\n","\n","        model.fit(xtrain, ytrain)\n","        test_preds = model.predict(xtest)\n","        test_t_preds = model.predict(xtest_t)\n","        final_preds.append(test_preds)\n","        final_preds_t.append(test_t_preds)\n","\n","    test_predictions = np.mean(np.column_stack(final_preds), axis = 1)\n","    test_t_predictions = np.mean(np.column_stack(final_preds_t), axis = 1)\n","    return test_predictions, test_t_predictions"]},{"cell_type":"markdown","id":"5e5bdaeb","metadata":{"papermill":{"duration":0.020533,"end_time":"2025-09-02T10:12:07.722533","exception":false,"start_time":"2025-09-02T10:12:07.702","status":"completed"},"tags":[]},"source":["Since KNN's error is very high as compared to the two best performing models, so considering only Random Forest Regressor and Gradient Boosting Regressor. "]},{"cell_type":"code","execution_count":32,"id":"e7280347","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:12:07.765774Z","iopub.status.busy":"2025-09-02T10:12:07.765412Z","iopub.status.idle":"2025-09-02T10:14:18.318958Z","shell.execute_reply":"2025-09-02T10:14:18.318209Z"},"papermill":{"duration":130.576954,"end_time":"2025-09-02T10:14:18.32061","exception":false,"start_time":"2025-09-02T10:12:07.743656","status":"completed"},"tags":[]},"outputs":[],"source":["#Predictive Imputation of LotFrontage\n","best_params_RF = {'n_estimators': 1000, 'min_samples_split': 5, 'max_depth': 20, 'random_state' : 88, 'n_jobs' : -1}\n","best_params_GB = {'n_estimators': 1000, 'min_samples_split': 10, 'max_depth': 4, 'random_state' : 66}\n","#best_params_knn = {'kneighborsregressor__n_neighbors': 7, 'kneighborsregressor__weights': 'distance', 'kneighborsregressor__p': 1}\n","\n","model_1 = RandomForestRegressor(**best_params_RF)\n","model_2 = GradientBoostingRegressor(**best_params_GB)\n","#model_3 = make_pipeline(preprocessing.StandardScaler(), KNeighborsRegressor(**best_params_Knn))\n","\n","preds_1, preds_t_1 = final_test_preds(Xtrain_impute, ytrain_impute, test_impute, test_t_impute, model_1)\n","preds_2, preds_t_2 = final_test_preds(Xtrain_impute, ytrain_impute, test_impute, test_t_impute, model_2)\n","\n","final_preds = ((preds_1 + preds_2) / 2)\n","final_t_preds = ((preds_t_1 + preds_t_2) / 2)"]},{"cell_type":"code","execution_count":33,"id":"4b336747","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:18.364247Z","iopub.status.busy":"2025-09-02T10:14:18.363988Z","iopub.status.idle":"2025-09-02T10:14:18.369104Z","shell.execute_reply":"2025-09-02T10:14:18.368198Z"},"papermill":{"duration":0.027898,"end_time":"2025-09-02T10:14:18.370326","exception":false,"start_time":"2025-09-02T10:14:18.342428","status":"completed"},"tags":[]},"outputs":[],"source":["df_train.loc[pd.isnull(df_train.LotFrontage), \"LotFrontage\"] = final_preds\n","df_test.loc[pd.isnull(df_test.LotFrontage), \"LotFrontage\"] = final_t_preds"]},{"cell_type":"code","execution_count":34,"id":"98813fdc","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:18.454435Z","iopub.status.busy":"2025-09-02T10:14:18.454171Z","iopub.status.idle":"2025-09-02T10:14:19.187139Z","shell.execute_reply":"2025-09-02T10:14:19.186291Z"},"papermill":{"duration":0.755706,"end_time":"2025-09-02T10:14:19.18842","exception":false,"start_time":"2025-09-02T10:14:18.432714","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Skew of LotFrontage Feature 0.15093578988698797\n","Skew of LotFrontage Feature 0.0991613234139847\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 1200x300 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#Checking if normal distribution of LotFrontage still preserved!\n","#Train data\n","a = sns.FacetGrid(df_train, aspect = 4)\n","a.map(sns.kdeplot, \"LotFrontage\", shade = True)\n","a.set(xlim = (0, df_train.LotFrontage.max()))\n","print(\"Skew of LotFrontage Feature\", df_train[\"LotFrontage\"].skew())\n","\n","#Test data\n","a = sns.FacetGrid(df_test, aspect = 4)\n","a.map(sns.kdeplot, \"LotFrontage\", shade = True)\n","a.set(xlim = (0, df_test.LotFrontage.max()))\n","\n","print(\"Skew of LotFrontage Feature\", df_test[\"LotFrontage\"].skew())"]},{"cell_type":"markdown","id":"bd73a459","metadata":{"papermill":{"duration":0.022,"end_time":"2025-09-02T10:14:19.233427","exception":false,"start_time":"2025-09-02T10:14:19.211427","status":"completed"},"tags":[]},"source":["# Feature Engineering"]},{"cell_type":"code","execution_count":35,"id":"88446581","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.27885Z","iopub.status.busy":"2025-09-02T10:14:19.278579Z","iopub.status.idle":"2025-09-02T10:14:19.326713Z","shell.execute_reply":"2025-09-02T10:14:19.325796Z"},"papermill":{"duration":0.072362,"end_time":"2025-09-02T10:14:19.328008","exception":false,"start_time":"2025-09-02T10:14:19.255646","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["['BsmtFinSF2', 'LowQualFinSF', 'BsmtHalfBath', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'LotFrontage_is_missing', 'MasVnrArea_is_missing', 'GarageYrBlt_is_missing']\n","['BsmtFinSF2', 'LowQualFinSF', 'BsmtHalfBath', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'LotFrontage_is_missing', 'MasVnrArea_is_missing', 'GarageYrBlt_is_missing']\n"]}],"source":["#Features having zero values in more than 70% of the dataset\n","#Train data features\n","zero_cols_train = [col for col in df_train.columns if ((df_train[col] == 0).sum()/len(df_train[col])) > 0.7]\n","print(zero_cols_train)\n","#Test data features\n","zero_cols_test = [col for col in df_test.columns if ((df_test[col] == 0).sum()/len(df_test[col])) > 0.7]\n","print(zero_cols_test)"]},{"cell_type":"code","execution_count":36,"id":"aa3e6e28","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.372842Z","iopub.status.busy":"2025-09-02T10:14:19.372624Z","iopub.status.idle":"2025-09-02T10:14:19.422037Z","shell.execute_reply":"2025-09-02T10:14:19.4214Z"},"papermill":{"duration":0.073248,"end_time":"2025-09-02T10:14:19.423286","exception":false,"start_time":"2025-09-02T10:14:19.350038","status":"completed"},"tags":[]},"outputs":[],"source":["#Feature to indicate number of porch features, bathrooms, bsmt bathroooms houses have\n","porch_features = [\"OpenPorchSF\",\"EnclosedPorch\",\"3SsnPorch\",\"ScreenPorch\"]\n","bathrooms = [\"BsmtFullBath\",\"BsmtHalfBath\",\"FullBath\",\"HalfBath\"]\n","df_train[\"num_porch_features\"] = df_train[porch_features].gt(0).sum(axis = 1)\n","df_test[\"num_porch_features\"] = df_test[porch_features].gt(0).sum(axis = 1)\n","df_train[\"num_bathrooms\"] = df_train[bathrooms].gt(0).sum(axis = 1)\n","df_test[\"num_bathrooms\"] = df_test[bathrooms].gt(0).sum(axis = 1)\n","#Binary Feature to indicate presence of OpenPorch, WoodDeck, BsmtBath\n","df_train[\"has_openporch\"] = np.where(df_train[\"OpenPorchSF\"] > 0, 1, 0)\n","df_test[\"has_openporch\"] = np.where(df_test[\"OpenPorchSF\"] > 0, 1, 0)\n","df_train[\"has_wooddeck\"] = np.where(df_train[\"WoodDeckSF\"] > 0, 1, 0)\n","df_test[\"has_wooddeck\"] = np.where(df_test[\"WoodDeckSF\"] > 0, 1, 0)\n","df_train[\"has_bsmtbath\"] = np.where((df_train[\"BsmtFullBath\"] > 0) | (df_train[\"BsmtHalfBath\"]) > 0, 1, 0)\n","df_test[\"has_bsmtbath\"] = np.where((df_test[\"BsmtFullBath\"] > 0) | (df_test[\"BsmtHalfBath\"]) > 0, 1, 0)\n","#Feature denoting how latest house remodeled from its sold year\n","df_train[\"RemodAge\"] = df_train[\"YrSold\"] - df_train[\"YearRemodAdd\"]\n","df_train.loc[df_train[\"RemodAge\"] < 0, \"RemodAge\"] = 0\n","df_test[\"RemodAge\"] =  df_test[\"YrSold\"] - df_test[\"YearRemodAdd\"]\n","df_test.loc[df_test[\"RemodAge\"] < 0, \"RemodAge\"] = 0\n","#Feature for age of house\n","df_train[\"HouseAge\"] = df_train[\"YrSold\"] - df_train[\"YearBuilt\"]\n","df_test[\"HouseAge\"] = df_test[\"YrSold\"] - df_test[\"YearBuilt\"]\n","#Feature for average basement finished area per quality of first finish and second finish\n","#Fit on train and transform on test to prevent leakage\n","mapping = df_train.groupby(\"BsmtFinType1\")[\"BsmtFinSF1\"].mean().to_dict()\n","df_train[\"BsmtFinSF1_typemean\"] = df_train[\"BsmtFinType1\"].map(mapping)\n","df_test[\"BsmtFinSF1_typemean\"] = df_test[\"BsmtFinType1\"].map(mapping)\n","#Fit on train and transform on test to prevent leakage\n","mapping = df_train.groupby(\"BsmtFinType2\")[\"BsmtFinSF2\"].mean().to_dict()\n","df_train[\"BsmtFinSF2_typemean\"] = df_train[\"BsmtFinType2\"].map(mapping)\n","df_test[\"BsmtFinSF2_typemean\"] = df_test[\"BsmtFinType2\"].map(mapping)\n","#Feature for average total area per quality for Basement and Garage\n","#Fit on train and transform on test to prevent leakage\n","mapping = df_train.groupby(\"BsmtQual\")[\"TotalBsmtSF\"].mean().to_dict()\n","df_train[\"TotalBsmtSF_qualmean\"] = df_train[\"BsmtQual\"].map(mapping)\n","df_test[\"TotalBsmtSF_qualmean\"] = df_test[\"BsmtQual\"].map(mapping)\n","#Fit on train and transform on test to prevent leakage\n","mapping = df_train.groupby(\"GarageQual\")[\"GarageArea\"].mean().to_dict()\n","df_train[\"GarageArea_qualmean\"] = df_train[\"GarageQual\"].map(mapping)\n","df_test[\"GarageArea_qualmean\"] = df_test[\"GarageQual\"].map(mapping)\n","#Feature indicating whether living area has low quality finish\n","df_train[\"haslowqual\"] = (df_train[\"LowQualFinSF\"] > 0).astype(int)\n","df_test[\"haslowqual\"] = (df_test[\"LowQualFinSF\"] > 0).astype(int)\n","#Creating Merged One-Hot Encoding of Condition1 and Condition2 features\n","#Train data\n","cond_dummies_train = pd.get_dummies(df_train[[\"Condition1\",\"Condition2\"]])\n","cond_dummies_train.columns = [col.split('_')[1] for col in cond_dummies_train.columns]\n","cond_dummies_train = cond_dummies_train.groupby(cond_dummies_train.columns, axis = 1).max()\n","df_train = pd.concat([df_train, cond_dummies_train], axis = 1)\n","#Test data\n","cond_dummies_test = pd.get_dummies(df_test[[\"Condition1\",\"Condition2\"]])\n","cond_dummies_test.columns = [col.split('_')[1] for col in cond_dummies_test.columns]\n","cond_dummies_test = cond_dummies_test.groupby(cond_dummies_test.columns, axis = 1).max()\n","cond_dummies_test = cond_dummies_test.reindex(columns = cond_dummies_train.columns, fill_value = 0)\n","df_test = pd.concat([df_test, cond_dummies_test], axis = 1)"]},{"cell_type":"code","execution_count":37,"id":"5c811eb4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.468911Z","iopub.status.busy":"2025-09-02T10:14:19.468694Z","iopub.status.idle":"2025-09-02T10:14:19.47914Z","shell.execute_reply":"2025-09-02T10:14:19.478528Z"},"papermill":{"duration":0.034146,"end_time":"2025-09-02T10:14:19.480273","exception":false,"start_time":"2025-09-02T10:14:19.446127","status":"completed"},"tags":[]},"outputs":[],"source":["#Creating positive (good for house value) and negative conditions count\n","condition_map = {\n","    \"PosN\" : 1,\n","    \"PosA\" : 1,\n","    \"RRNn\" : -1,\n","    \"RRAn\" : -1,\n","    \"RRNe\" : -1,\n","    \"RRAe\" : -1,\n","    \"Artery\" : -1,\n","    \"Feedr\" : -1,\n","    \"Norm\" : 0\n","}\n","\n","def condition_feature(df):\n","    df[\"Condition1\"] = df[\"Condition1\"].map(condition_map)\n","    df[\"Condition2\"] = df[\"Condition2\"].map(condition_map)\n","\n","    df[\"PositiveCond_count\"] = ((df[\"Condition1\"] == 1).astype(int) + (df[\"Condition2\"] == 1).astype(int))\n","    df[\"NegativeCond_count\"] = ((df[\"Condition1\"] == -1).astype(int) + (df[\"Condition2\"] == -1).astype(int))\n","    return df\n","df_train = condition_feature(df_train)\n","df_test = condition_feature(df_test)"]},{"cell_type":"code","execution_count":38,"id":"7b4de4d5","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.525233Z","iopub.status.busy":"2025-09-02T10:14:19.524999Z","iopub.status.idle":"2025-09-02T10:14:19.528281Z","shell.execute_reply":"2025-09-02T10:14:19.527512Z"},"papermill":{"duration":0.026943,"end_time":"2025-09-02T10:14:19.529407","exception":false,"start_time":"2025-09-02T10:14:19.502464","status":"completed"},"tags":[]},"outputs":[],"source":["#cat_cols_toremove = [\"Alley\",\"MiscFeature\",\"PoolQC\",\"Fence\"]\n","#Removing columns related to cat_cols_toremove and zero_cols after feature engineering above\n","related_cols_toremove = [\"MiscVal\",\"PoolArea\",\"3SsnPorch\",\"ScreenPorch\",\"EnclosedPorch\",\"BsmtHalfBath\",\"BsmtFinSF2\",\"LowQualFinSF\",\"Condition1\",\"Condition2\"]"]},{"cell_type":"code","execution_count":39,"id":"6b32a239","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.574659Z","iopub.status.busy":"2025-09-02T10:14:19.574403Z","iopub.status.idle":"2025-09-02T10:14:19.579971Z","shell.execute_reply":"2025-09-02T10:14:19.579336Z"},"papermill":{"duration":0.029252,"end_time":"2025-09-02T10:14:19.58115","exception":false,"start_time":"2025-09-02T10:14:19.551898","status":"completed"},"tags":[]},"outputs":[],"source":["df_train = df_train.drop(related_cols_toremove, axis = 1)\n","df_test = df_test.drop(related_cols_toremove, axis = 1)"]},{"cell_type":"markdown","id":"237ba164","metadata":{"papermill":{"duration":0.021953,"end_time":"2025-09-02T10:14:19.625365","exception":false,"start_time":"2025-09-02T10:14:19.603412","status":"completed"},"tags":[]},"source":["# Handling Rare Categories"]},{"cell_type":"code","execution_count":40,"id":"c6034a71","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.671071Z","iopub.status.busy":"2025-09-02T10:14:19.670823Z","iopub.status.idle":"2025-09-02T10:14:19.677024Z","shell.execute_reply":"2025-09-02T10:14:19.67638Z"},"papermill":{"duration":0.030459,"end_time":"2025-09-02T10:14:19.678221","exception":false,"start_time":"2025-09-02T10:14:19.647762","status":"completed"},"tags":[]},"outputs":[],"source":["#Numerical Features\n","num_ = [col for col in df_train.columns if df_train[col].dtype in [\"int64\",\"float64\"]]\n","#Categorical Features\n","high_cat = high_cardinality_cat_cols\n","low_cat = [col for col in df_train.columns if col not in num_+high_cat]"]},{"cell_type":"code","execution_count":41,"id":"444820ce","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.723635Z","iopub.status.busy":"2025-09-02T10:14:19.723363Z","iopub.status.idle":"2025-09-02T10:14:19.739273Z","shell.execute_reply":"2025-09-02T10:14:19.738502Z"},"papermill":{"duration":0.03957,"end_time":"2025-09-02T10:14:19.740366","exception":false,"start_time":"2025-09-02T10:14:19.700796","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["No Rare Category in Utilities in test data \n","No Rare Category in HouseStyle in test data \n","No Rare Category in RoofMatl in test data \n","No Rare Category in Heating in test data \n","No Rare Category in Electrical in test data \n","No Rare Category in GarageQual in test data \n","No Rare Category in Exterior1st in test data \n","No Rare Category in Exterior2nd in test data \n"]}],"source":["rare_col = [col for col in low_cat + high_cat if set(df_train[col].unique()) != set(df_test[col].unique())]\n","for colm in rare_col:\n","    if df_train[colm].unique().shape[0] < df_test[colm].unique().shape[0]:\n","        print(df_train[colm].unique())\n","        print(df_test[colm].unique())\n","        print(\"\\n\")\n","    else:\n","        print(f\"No Rare Category in {colm} in test data \")"]},{"cell_type":"markdown","id":"deddd514","metadata":{"papermill":{"duration":0.022039,"end_time":"2025-09-02T10:14:19.785029","exception":false,"start_time":"2025-09-02T10:14:19.76299","status":"completed"},"tags":[]},"source":["# Feature Encoding"]},{"cell_type":"markdown","id":"4a8376d6","metadata":{"papermill":{"duration":0.022566,"end_time":"2025-09-02T10:14:19.829701","exception":false,"start_time":"2025-09-02T10:14:19.807135","status":"completed"},"tags":[]},"source":["**CatBoost Encoding**"]},{"cell_type":"code","execution_count":42,"id":"20ac4728","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.876788Z","iopub.status.busy":"2025-09-02T10:14:19.876462Z","iopub.status.idle":"2025-09-02T10:14:19.883981Z","shell.execute_reply":"2025-09-02T10:14:19.883303Z"},"papermill":{"duration":0.033326,"end_time":"2025-09-02T10:14:19.885116","exception":false,"start_time":"2025-09-02T10:14:19.85179","status":"completed"},"tags":[]},"outputs":[],"source":["def catboost(df_train_oneCB, df_test_oneCB):\n","    X_train_CB = df_train_oneCB.drop([\"SalePrice\"], axis = 1)\n","    Y_train_CB = df_train_oneCB[[\"SalePrice\" ,\"kfold\"]]\n","    X_test_CB = df_test_oneCB.copy()\n","    train_partsCB = []\n","    test_partsCB = []\n","    required = [col for col in X_train_CB.columns if col not in [\"kfold\"]]\n","    for fold in range(5):\n","        xtrainCB = X_train_CB.loc[X_train_CB.kfold != fold]\n","        ytrainCB = Y_train_CB.loc[Y_train_CB.kfold != fold, \"SalePrice\"]\n","        xvalidCB = X_train_CB.loc[X_train_CB.kfold == fold]\n","    \n","        for c in high_cat:\n","            xtrainCB[c] = xtrainCB[c].astype(str)\n","            xvalidCB[c] = xvalidCB[c].astype(str)\n","    \n","        xtrainCB = xtrainCB[required]\n","        xvalidCB = xvalidCB[required]\n","        #Fit encoder on train folds only\n","        cb = CatBoostEncoder(cols = high_cat, return_df = True)\n","        cb.fit(xtrainCB[high_cat], ytrainCB)\n","    \n","        #Transforming xtrain, xvalid and xtest\n","        xtrainCB_enc = xtrainCB.copy()\n","        xvalidCB_enc = xvalidCB.copy()\n","        xtestCB_enc = X_test_CB.copy()\n","    \n","        xtrainCB_enc = cb.transform(xtrainCB[high_cat])\n","        xvalidCB_enc = cb.transform(xvalidCB[high_cat])\n","        xtestCB_enc = cb.transform(X_test_CB[high_cat])\n","    \n","        #Keeping Out-of-Fold (OOF),i.e., validation data only\n","        train_partsCB.append(xvalidCB_enc)\n","        test_partsCB.append(xtestCB_enc[high_cat])\n","    \n","    #sort_index() reorders rows by their index so it lines back up with the original training DataFrame\n","    train_cb_oof = pd.concat(train_partsCB).sort_index()\n","    \n","    test_cb_mean = pd.concat(test_partsCB, axis = 1)\n","    #Averaging 10 copies (since used 10 folds) of each columns\n","    test_cb = test_cb_mean.T.groupby(level = 0).mean().T\n","    #Puts columns back in original order\n","    test_cb = test_cb[high_cat]\n","\n","    train_oneCB_final = X_train_CB.drop(columns = high_cat).merge(train_cb_oof[high_cat], left_index = True, right_index = True, how = 'left')\n","    test_oneCB_final = X_test_CB.drop(columns = high_cat).merge(test_cb[high_cat], left_index = True, right_index = True, how = 'left')\n","\n","    #Putting back LotFrontage in training data\n","    y__trainCB = Y_train_CB[\"SalePrice\"]\n","    train_oneCB_final[\"SalePrice\"] = y__trainCB\n","    \n","    return train_oneCB_final, test_oneCB_final"]},{"cell_type":"markdown","id":"8349d4a7","metadata":{"papermill":{"duration":0.02201,"end_time":"2025-09-02T10:14:19.929649","exception":false,"start_time":"2025-09-02T10:14:19.907639","status":"completed"},"tags":[]},"source":["**Frequency Encoding**"]},{"cell_type":"code","execution_count":43,"id":"430812de","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:19.975959Z","iopub.status.busy":"2025-09-02T10:14:19.975745Z","iopub.status.idle":"2025-09-02T10:14:19.981661Z","shell.execute_reply":"2025-09-02T10:14:19.980828Z"},"papermill":{"duration":0.029896,"end_time":"2025-09-02T10:14:19.98276","exception":false,"start_time":"2025-09-02T10:14:19.952864","status":"completed"},"tags":[]},"outputs":[],"source":["def freq_enc(df_train_oneFE, df_test_oneFE):\n","    for col in high_cat:\n","        train_freq = pd.Series(index = df_train_oneFE.index, dtype = float)\n","        test_freq = pd.DataFrame()\n","        for fold in range(5):\n","            xtrain = df_train_oneFE.loc[df_train_oneFE.kfold != fold]\n","            xvalid = df_train_oneFE.loc[df_train_oneFE.kfold == fold]\n","            xtest = df_test_oneFE.copy()\n","    \n","            freq_enc = xtrain[col].value_counts().to_dict()\n","            train_freq.loc[xvalid.index] = xvalid[col].map(freq_enc)\n","            test_freq[f\"{col}_enc_{fold}\"] = xtest[col].map(freq_enc)\n","    \n","        max_freq = df_train_oneFE[col].value_counts().max()\n","        train_freq.fillna(max_freq, inplace = True)\n","        df_train_oneFE[col + \"_enc\"] = train_freq.astype(int)\n","        df_test_oneFE[col + \"_enc\"] = test_freq.mean(axis = 1).astype(int)\n","        df_test_oneFE[col + \"_enc\"].fillna(max_freq, inplace = True)\n","        \n","    df_train_oneFE = df_train_oneFE.drop(high_cat, axis = 1)\n","    df_test_oneFE = df_test_oneFE.drop(high_cat, axis = 1)\n","\n","    return df_train_oneFE, df_test_oneFE"]},{"cell_type":"markdown","id":"f0057a4d","metadata":{"papermill":{"duration":0.022188,"end_time":"2025-09-02T10:14:20.027281","exception":false,"start_time":"2025-09-02T10:14:20.005093","status":"completed"},"tags":[]},"source":["Testing model performance for 4 different encoding pairs"]},{"cell_type":"markdown","id":"831e97e8","metadata":{"papermill":{"duration":0.021979,"end_time":"2025-09-02T10:14:20.071377","exception":false,"start_time":"2025-09-02T10:14:20.049398","status":"completed"},"tags":[]},"source":["**1. One-Hot Encoding + CatBoost Encoding**"]},{"cell_type":"code","execution_count":44,"id":"fd80158f","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.117276Z","iopub.status.busy":"2025-09-02T10:14:20.117014Z","iopub.status.idle":"2025-09-02T10:14:20.123997Z","shell.execute_reply":"2025-09-02T10:14:20.123332Z"},"papermill":{"duration":0.031288,"end_time":"2025-09-02T10:14:20.125321","exception":false,"start_time":"2025-09-02T10:14:20.094033","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_onehot = df_train.copy()\n","df_test_onehot = df_test.copy()"]},{"cell_type":"markdown","id":"145e9ee5","metadata":{"papermill":{"duration":0.023014,"end_time":"2025-09-02T10:14:20.171804","exception":false,"start_time":"2025-09-02T10:14:20.14879","status":"completed"},"tags":[]},"source":["One-Hot Encoding for low cardinal categorical features"]},{"cell_type":"code","execution_count":45,"id":"b4e69ab4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.219341Z","iopub.status.busy":"2025-09-02T10:14:20.219121Z","iopub.status.idle":"2025-09-02T10:14:20.279678Z","shell.execute_reply":"2025-09-02T10:14:20.279022Z"},"papermill":{"duration":0.08584,"end_time":"2025-09-02T10:14:20.28101","exception":false,"start_time":"2025-09-02T10:14:20.19517","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_dummies = pd.get_dummies(df_train[low_cat], drop_first = True, dtype = int)\n","df_train_onehot = pd.concat([df_train_onehot, df_train_dummies], axis = 1)\n","df_test_dummies = pd.get_dummies(df_test[low_cat], drop_first = True, dtype = int)\n","\n","#aligning categories in test in accordance with train\n","df_test_dummies = df_test_dummies.reindex(columns = df_train_dummies.columns, fill_value = 0)\n","df_test_onehot = pd.concat([df_test_onehot, df_test_dummies], axis = 1)"]},{"cell_type":"code","execution_count":46,"id":"95d014b5","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.328515Z","iopub.status.busy":"2025-09-02T10:14:20.328266Z","iopub.status.idle":"2025-09-02T10:14:20.335322Z","shell.execute_reply":"2025-09-02T10:14:20.334468Z"},"papermill":{"duration":0.031962,"end_time":"2025-09-02T10:14:20.33657","exception":false,"start_time":"2025-09-02T10:14:20.304608","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_onehot = df_train_onehot.drop(low_cat, axis = 1)\n","df_test_onehot = df_test_onehot.drop(low_cat, axis = 1)"]},{"cell_type":"markdown","id":"38102506","metadata":{"papermill":{"duration":0.021992,"end_time":"2025-09-02T10:14:20.381019","exception":false,"start_time":"2025-09-02T10:14:20.359027","status":"completed"},"tags":[]},"source":["CatBoost Encoding for high cardinal categorical features"]},{"cell_type":"code","execution_count":47,"id":"0412e8bc","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.426251Z","iopub.status.busy":"2025-09-02T10:14:20.426031Z","iopub.status.idle":"2025-09-02T10:14:20.435199Z","shell.execute_reply":"2025-09-02T10:14:20.434603Z"},"papermill":{"duration":0.033137,"end_time":"2025-09-02T10:14:20.436415","exception":false,"start_time":"2025-09-02T10:14:20.403278","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_oneCB = df_train_onehot.copy()\n","df_test_oneCB = df_test_onehot.copy()"]},{"cell_type":"code","execution_count":48,"id":"4dc549cc","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.482059Z","iopub.status.busy":"2025-09-02T10:14:20.481817Z","iopub.status.idle":"2025-09-02T10:14:20.683723Z","shell.execute_reply":"2025-09-02T10:14:20.682849Z"},"papermill":{"duration":0.226707,"end_time":"2025-09-02T10:14:20.685516","exception":false,"start_time":"2025-09-02T10:14:20.458809","status":"completed"},"tags":[]},"outputs":[],"source":["#CatBoost Encoding for high cardinality categorical columns\n","df_train_oneCB_F, df_test_oneCB_F = catboost(df_train_oneCB, df_test_oneCB)"]},{"cell_type":"markdown","id":"23e8bba0","metadata":{"papermill":{"duration":0.02335,"end_time":"2025-09-02T10:14:20.733669","exception":false,"start_time":"2025-09-02T10:14:20.710319","status":"completed"},"tags":[]},"source":["**2. One-Hot Encoding + Frequency Encoding**"]},{"cell_type":"markdown","id":"10013318","metadata":{"papermill":{"duration":0.022851,"end_time":"2025-09-02T10:14:20.77939","exception":false,"start_time":"2025-09-02T10:14:20.756539","status":"completed"},"tags":[]},"source":["Frequency Encoding for high cardinal categorical features"]},{"cell_type":"code","execution_count":49,"id":"e2996d7f","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.826919Z","iopub.status.busy":"2025-09-02T10:14:20.826637Z","iopub.status.idle":"2025-09-02T10:14:20.832535Z","shell.execute_reply":"2025-09-02T10:14:20.831875Z"},"papermill":{"duration":0.031663,"end_time":"2025-09-02T10:14:20.833876","exception":false,"start_time":"2025-09-02T10:14:20.802213","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_oneFE = df_train_onehot.copy()\n","df_test_oneFE = df_test_onehot.copy()"]},{"cell_type":"code","execution_count":50,"id":"1bf1293e","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:20.882307Z","iopub.status.busy":"2025-09-02T10:14:20.882064Z","iopub.status.idle":"2025-09-02T10:14:20.958499Z","shell.execute_reply":"2025-09-02T10:14:20.957781Z"},"papermill":{"duration":0.102438,"end_time":"2025-09-02T10:14:20.960049","exception":false,"start_time":"2025-09-02T10:14:20.857611","status":"completed"},"tags":[]},"outputs":[],"source":["#Frequency Encoding for high cardinality columns\n","df_train_oneFE_F, df_test_oneFE_F = freq_enc(df_train_oneFE, df_test_oneFE)"]},{"cell_type":"markdown","id":"46d9eb02","metadata":{"papermill":{"duration":0.022326,"end_time":"2025-09-02T10:14:21.006047","exception":false,"start_time":"2025-09-02T10:14:20.983721","status":"completed"},"tags":[]},"source":["**3. Categorical + CatBoost Encoding**"]},{"cell_type":"code","execution_count":51,"id":"fedf5e0b","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.051895Z","iopub.status.busy":"2025-09-02T10:14:21.051556Z","iopub.status.idle":"2025-09-02T10:14:21.057985Z","shell.execute_reply":"2025-09-02T10:14:21.057342Z"},"papermill":{"duration":0.031035,"end_time":"2025-09-02T10:14:21.059379","exception":false,"start_time":"2025-09-02T10:14:21.028344","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_cat = df_train.copy()\n","df_test_cat = df_test.copy()"]},{"cell_type":"markdown","id":"ff3d6b84","metadata":{"papermill":{"duration":0.021958,"end_time":"2025-09-02T10:14:21.104522","exception":false,"start_time":"2025-09-02T10:14:21.082564","status":"completed"},"tags":[]},"source":["Using Pandas Categorical for low cardinal categorical features"]},{"cell_type":"code","execution_count":52,"id":"f2e7c973","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.150134Z","iopub.status.busy":"2025-09-02T10:14:21.149904Z","iopub.status.idle":"2025-09-02T10:14:21.231871Z","shell.execute_reply":"2025-09-02T10:14:21.231207Z"},"papermill":{"duration":0.106262,"end_time":"2025-09-02T10:14:21.233185","exception":false,"start_time":"2025-09-02T10:14:21.126923","status":"completed"},"tags":[]},"outputs":[],"source":["#Using Pandas Categorical for low cardinal categorical features\n","#because label encoding can't encode an unseen data/category present in test but not in train\n","#So,Pandas Categorical automatically encode rare category in test as -1.\n","#Also,possible in Ordinal Encoding but it requires some priority ordering among categories\n","#(OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1))\n","\n","#No chance of data leakage and overfit due to noise \n","#as it is just a deterministic renaming of categories to integers (like in Ordinal/Label encoding)\n","#and rare categories don't exist in test data\n","#So, no need to do encoding in folds\n","for col in low_cat:\n","    cats = pd.Categorical(df_train_cat[col].astype(str)).categories\n","    df_train_cat[col + \"_enc\"] = pd.Categorical(df_train_cat[col].astype(str), categories = cats).codes\n","    df_test_cat[col + \"_enc\"] = pd.Categorical(df_test_cat[col].astype(str), categories = cats).codes"]},{"cell_type":"code","execution_count":53,"id":"21984644","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.278677Z","iopub.status.busy":"2025-09-02T10:14:21.278465Z","iopub.status.idle":"2025-09-02T10:14:21.285078Z","shell.execute_reply":"2025-09-02T10:14:21.284436Z"},"papermill":{"duration":0.030627,"end_time":"2025-09-02T10:14:21.286149","exception":false,"start_time":"2025-09-02T10:14:21.255522","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_cat = df_train_cat.drop(columns = low_cat)\n","df_test_cat = df_test_cat.drop(columns = low_cat)"]},{"cell_type":"markdown","id":"2364b891","metadata":{"papermill":{"duration":0.022055,"end_time":"2025-09-02T10:14:21.330373","exception":false,"start_time":"2025-09-02T10:14:21.308318","status":"completed"},"tags":[]},"source":["CatBoost Encoding for high cardinal categorical features"]},{"cell_type":"code","execution_count":54,"id":"d4871eb4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.375669Z","iopub.status.busy":"2025-09-02T10:14:21.375436Z","iopub.status.idle":"2025-09-02T10:14:21.379875Z","shell.execute_reply":"2025-09-02T10:14:21.379313Z"},"papermill":{"duration":0.028454,"end_time":"2025-09-02T10:14:21.381049","exception":false,"start_time":"2025-09-02T10:14:21.352595","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_catCB = df_train_cat.copy()\n","df_test_catCB = df_test_cat.copy()"]},{"cell_type":"code","execution_count":55,"id":"ea125a1b","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.428074Z","iopub.status.busy":"2025-09-02T10:14:21.427858Z","iopub.status.idle":"2025-09-02T10:14:21.624647Z","shell.execute_reply":"2025-09-02T10:14:21.623924Z"},"papermill":{"duration":0.221539,"end_time":"2025-09-02T10:14:21.62618","exception":false,"start_time":"2025-09-02T10:14:21.404641","status":"completed"},"tags":[]},"outputs":[],"source":["#CatBoost Encoding for high cardinality categorical columns\n","df_train_catCB_F, df_test_catCB_F = catboost(df_train_catCB, df_test_catCB)"]},{"cell_type":"markdown","id":"59bcf019","metadata":{"papermill":{"duration":0.022532,"end_time":"2025-09-02T10:14:21.671927","exception":false,"start_time":"2025-09-02T10:14:21.649395","status":"completed"},"tags":[]},"source":["**4. Categorical + Frequency Encoding**"]},{"cell_type":"markdown","id":"f8e7c737","metadata":{"papermill":{"duration":0.022714,"end_time":"2025-09-02T10:14:21.717419","exception":false,"start_time":"2025-09-02T10:14:21.694705","status":"completed"},"tags":[]},"source":["Frequency Encoding for high cardinal categorical features"]},{"cell_type":"code","execution_count":56,"id":"5491b63a","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.763764Z","iopub.status.busy":"2025-09-02T10:14:21.763511Z","iopub.status.idle":"2025-09-02T10:14:21.768651Z","shell.execute_reply":"2025-09-02T10:14:21.768013Z"},"papermill":{"duration":0.029885,"end_time":"2025-09-02T10:14:21.769925","exception":false,"start_time":"2025-09-02T10:14:21.74004","status":"completed"},"tags":[]},"outputs":[],"source":["df_train_catFE = df_train_cat.copy()\n","df_test_catFE = df_test_cat.copy()"]},{"cell_type":"code","execution_count":57,"id":"63d2742a","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.815205Z","iopub.status.busy":"2025-09-02T10:14:21.814995Z","iopub.status.idle":"2025-09-02T10:14:21.873812Z","shell.execute_reply":"2025-09-02T10:14:21.872912Z"},"papermill":{"duration":0.082915,"end_time":"2025-09-02T10:14:21.875125","exception":false,"start_time":"2025-09-02T10:14:21.79221","status":"completed"},"tags":[]},"outputs":[],"source":["#Frequency Encoding for high cardinality columns\n","df_train_catFE_F, df_test_catFE_F = freq_enc(df_train_catFE, df_test_catFE)"]},{"cell_type":"markdown","id":"f0be7d0d","metadata":{"papermill":{"duration":0.02233,"end_time":"2025-09-02T10:14:21.920283","exception":false,"start_time":"2025-09-02T10:14:21.897953","status":"completed"},"tags":[]},"source":["# Permutation Importance"]},{"cell_type":"code","execution_count":58,"id":"575157df","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:21.968153Z","iopub.status.busy":"2025-09-02T10:14:21.967859Z","iopub.status.idle":"2025-09-02T10:14:21.975296Z","shell.execute_reply":"2025-09-02T10:14:21.974513Z"},"papermill":{"duration":0.0339,"end_time":"2025-09-02T10:14:21.976624","exception":false,"start_time":"2025-09-02T10:14:21.942724","status":"completed"},"tags":[]},"outputs":[],"source":["def perm_imp(train):\n","    features_ = [col for col in train.columns if col not in [\"kfold\",\"SalePrice\"]]\n","    scoring = \"neg_mean_absolute_error\"\n","    n_iter = 10\n","    random_state = 86\n","    \n","    imp_cols = []\n","    imp_series = []\n","    imp_std = []\n","    my_model = RandomForestRegressor(n_estimators = 200, random_state = 42)\n","    for fold in range(5):\n","        xtrain = train.loc[train.kfold != fold, features_]\n","        ytrain = train.loc[train.kfold != fold, \"SalePrice\"]\n","        xvalid = train.loc[train.kfold == fold, features_]\n","        yvalid = train.loc[train.kfold == fold, \"SalePrice\"]\n","\n","        #Cloning to get fresh untrained model per fold\n","        model = clone(my_model)\n","        model.fit(xtrain, ytrain)\n","\n","        perm = PermutationImportance(model, random_state = random_state, scoring = scoring, n_iter = n_iter)\n","        perm.fit(xvalid, yvalid)\n","\n","        #Store importances per fold\n","        fold_imp_mean = pd.Series(perm.feature_importances_, index = xtrain.columns, name = f\"fold_{fold}\")\n","        fold_imp_std = pd.Series(perm.feature_importances_std_, index = xtrain.columns, name = f\"fold_{fold}\")\n","        imp_series.append(fold_imp_mean)\n","        imp_std.append(fold_imp_std)\n","        imp_cols.append(f\"fold_{fold}\")\n","    #Aggregate\n","    imp_mat = pd.concat(imp_series, axis = 1)\n","    imp_mat[\"mean\"] = imp_mat.mean(axis = 1).round(3)\n","    imp_mat[\"weights\"] = imp_mat[\"mean\"].round(3).astype(str) + \"±\" + pd.concat(imp_std, axis = 1).max(axis = 1).round(3).astype(str)\n","    imp_mat[\"std\"] = imp_mat[imp_cols].std(axis = 1, ddof = 1)\n","    imp_mat[\"rank\"] = imp_mat[\"mean\"].rank(ascending = False, method = \"dense\")\n","\n","    imp_sorted = imp_mat.sort_values(\"mean\", ascending = False)\n","\n","    return imp_sorted[[\"rank\",\"mean\",\"weights\",\"std\"]]"]},{"cell_type":"markdown","id":"54b3c563","metadata":{"papermill":{"duration":0.021995,"end_time":"2025-09-02T10:14:22.020841","exception":false,"start_time":"2025-09-02T10:14:21.998846","status":"completed"},"tags":[]},"source":["**1. One-Hot Encoding + CatBoost Encoding**"]},{"cell_type":"code","execution_count":59,"id":"e77e3dd1","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.066238Z","iopub.status.busy":"2025-09-02T10:14:22.065977Z","iopub.status.idle":"2025-09-02T10:14:22.069024Z","shell.execute_reply":"2025-09-02T10:14:22.068338Z"},"papermill":{"duration":0.027084,"end_time":"2025-09-02T10:14:22.070261","exception":false,"start_time":"2025-09-02T10:14:22.043177","status":"completed"},"tags":[]},"outputs":[],"source":["#print(perm_imp(df_train_oneCB_F).head(20))\n","#print(\"\\n\")\n","#print(perm_imp(df_train_oneCB_F).tail(20))"]},{"cell_type":"markdown","id":"b4eb9fb5","metadata":{"papermill":{"duration":0.022242,"end_time":"2025-09-02T10:14:22.114647","exception":false,"start_time":"2025-09-02T10:14:22.092405","status":"completed"},"tags":[]},"source":["**2. One-Hot Encoding + Frequency Encoding**"]},{"cell_type":"code","execution_count":60,"id":"193250b4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.160539Z","iopub.status.busy":"2025-09-02T10:14:22.160275Z","iopub.status.idle":"2025-09-02T10:14:22.16322Z","shell.execute_reply":"2025-09-02T10:14:22.162613Z"},"papermill":{"duration":0.026981,"end_time":"2025-09-02T10:14:22.164357","exception":false,"start_time":"2025-09-02T10:14:22.137376","status":"completed"},"tags":[]},"outputs":[],"source":["#perm_imp(df_train_oneFE_F)"]},{"cell_type":"markdown","id":"31821ec9","metadata":{"papermill":{"duration":0.022522,"end_time":"2025-09-02T10:14:22.208858","exception":false,"start_time":"2025-09-02T10:14:22.186336","status":"completed"},"tags":[]},"source":["**3. Categorical + CatBoost Encoding**"]},{"cell_type":"code","execution_count":61,"id":"6c9f3378","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.254118Z","iopub.status.busy":"2025-09-02T10:14:22.253911Z","iopub.status.idle":"2025-09-02T10:14:22.256785Z","shell.execute_reply":"2025-09-02T10:14:22.256135Z"},"papermill":{"duration":0.026822,"end_time":"2025-09-02T10:14:22.257914","exception":false,"start_time":"2025-09-02T10:14:22.231092","status":"completed"},"tags":[]},"outputs":[],"source":["#perm_imp(df_train_catCB_F)"]},{"cell_type":"markdown","id":"82984793","metadata":{"papermill":{"duration":0.021747,"end_time":"2025-09-02T10:14:22.301791","exception":false,"start_time":"2025-09-02T10:14:22.280044","status":"completed"},"tags":[]},"source":["**4. Categorical + Frequency Encoding**"]},{"cell_type":"code","execution_count":62,"id":"45065464","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.346385Z","iopub.status.busy":"2025-09-02T10:14:22.346178Z","iopub.status.idle":"2025-09-02T10:14:22.348911Z","shell.execute_reply":"2025-09-02T10:14:22.348298Z"},"papermill":{"duration":0.026376,"end_time":"2025-09-02T10:14:22.350101","exception":false,"start_time":"2025-09-02T10:14:22.323725","status":"completed"},"tags":[]},"outputs":[],"source":["#print(perm_imp(df_train_catFE_F).head(20))\n","#print(\"\\n\")\n","#print(perm_imp(df_train_catFE_F).tail(20))"]},{"cell_type":"markdown","id":"ff683933","metadata":{"papermill":{"duration":0.02194,"end_time":"2025-09-02T10:14:22.394019","exception":false,"start_time":"2025-09-02T10:14:22.372079","status":"completed"},"tags":[]},"source":["**Average importance ranking of top 15 features based on permutation importance:**\n","\n","1. OverallQual\n","2. GrLivArea\n","3. Neighborhood\n","4. TotalBsmtSF\n","5. BsmtFinSF1\n","6. 1stFlrSF\n","7. GarageCars\n","8. GarageArea\n","9. LotArea\n","10. OverallCond\n","11. 2ndFlrSF\n","12. HouseAge\n","13. RemodAge\n","14. YearRemodAdd\n","15. YearBuilt\n","    \n","Almost all these important features were used to create new features during feature engineering."]},{"cell_type":"markdown","id":"a4f00371","metadata":{"papermill":{"duration":0.021905,"end_time":"2025-09-02T10:14:22.438155","exception":false,"start_time":"2025-09-02T10:14:22.41625","status":"completed"},"tags":[]},"source":["Out of the 20 least important features, except **\"MoSold\"** and **\"Id\"**, all features are either created out of encoding or during feature engineering. Only \"MoSold\" and \"Id\" were the only base features present in the list. \n","\n","It is not safe to remove all these features as they might have good correlation with other similar encoded/created feature during feature engineering/encoding.\n","\n","However, \"MoSold\" is a base feature and has 4th lowest feature importance, having weight of **-6.089±45.594**. It has very high standard deviation and negative mean, so can remove it."]},{"cell_type":"markdown","id":"96fe131c","metadata":{"papermill":{"duration":0.022013,"end_time":"2025-09-02T10:14:22.482302","exception":false,"start_time":"2025-09-02T10:14:22.460289","status":"completed"},"tags":[]},"source":["# Modeling"]},{"cell_type":"markdown","id":"b0986f1c","metadata":{"papermill":{"duration":0.024436,"end_time":"2025-09-02T10:14:22.53023","exception":false,"start_time":"2025-09-02T10:14:22.505794","status":"completed"},"tags":[]},"source":["**1. Random Forest**"]},{"cell_type":"code","execution_count":63,"id":"76979025","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.57805Z","iopub.status.busy":"2025-09-02T10:14:22.577749Z","iopub.status.idle":"2025-09-02T10:14:22.582309Z","shell.execute_reply":"2025-09-02T10:14:22.581641Z"},"papermill":{"duration":0.028907,"end_time":"2025-09-02T10:14:22.583417","exception":false,"start_time":"2025-09-02T10:14:22.55451","status":"completed"},"tags":[]},"outputs":[],"source":["def cols_consider(data):\n","    u_col = [col for col in data.columns if col not in [\"Id\", \"kfold\", \"MoSold\"]]\n","    data = data[u_col]\n","    return data\n","\n","def separate_F(train, test):\n","    train.columns = train.columns.astype(str)\n","    test.columns = test.columns.astype(str)\n","    y = train[\"SalePrice\"]\n","    X = train.drop([\"SalePrice\"], axis = 1)\n","    return X, y, test"]},{"cell_type":"code","execution_count":64,"id":"0e1581ec","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.628564Z","iopub.status.busy":"2025-09-02T10:14:22.628313Z","iopub.status.idle":"2025-09-02T10:14:22.634416Z","shell.execute_reply":"2025-09-02T10:14:22.633809Z"},"papermill":{"duration":0.030099,"end_time":"2025-09-02T10:14:22.635727","exception":false,"start_time":"2025-09-02T10:14:22.605628","status":"completed"},"tags":[]},"outputs":[],"source":["def random_forest_F(X, y):\n","    n_estimators_ = [300, 500, 1000, 2000]\n","    max_depths = [2, 5, 10, 20]\n","    min_samples_splits = [2, 5, 10]\n","\n","    best_score = np.inf\n","    best_params = {}\n","\n","    #Using log(SalePrice) according to rules of kaggle house price competition\n","    log_y = np.log1p(y)\n","    for n_estimators in n_estimators_:\n","        for max_depth in max_depths:\n","            for min_samples_split in min_samples_splits:\n","                scores = []\n","                for fold in range(5):\n","                    xtrain = X.loc[X.kfold != fold].reset_index(drop=True)\n","                    ytrain = log_y.loc[X.kfold != fold].reset_index(drop=True)\n","                    xvalid = X.loc[X.kfold == fold].reset_index(drop=True)\n","                    yvalid = log_y.loc[X.kfold == fold].reset_index(drop=True)\n","\n","                    xtrain = cols_consider(xtrain)\n","                    xvalid = cols_consider(xvalid)\n","\n","                    model = RandomForestRegressor(n_estimators = n_estimators, min_samples_split = min_samples_split, max_depth = max_depth, n_jobs = -1, random_state = fold)\n","                    model.fit(xtrain, ytrain)\n","                    preds_log = model.predict(xvalid)\n","                    #squared = False --> RMSE and squared = True --> MSE\n","                    rmse_score = metrics.mean_squared_error(yvalid, preds_log, squared = False)\n","                    scores.append(rmse_score)\n","                avg_score = float(np.mean(scores))\n","                if avg_score < best_score: #Minimize RMSE\n","                    best_score = avg_score\n","                    best_params = {\"n_estimators\" : n_estimators, \"min_samples_split\" : min_samples_split, \"max_depth\" : max_depth}\n","    return best_score, best_params"]},{"cell_type":"markdown","id":"8408f9da","metadata":{"papermill":{"duration":0.022504,"end_time":"2025-09-02T10:14:22.680613","exception":false,"start_time":"2025-09-02T10:14:22.658109","status":"completed"},"tags":[]},"source":["**2. Gradient Boosting**"]},{"cell_type":"code","execution_count":65,"id":"bfd3966c","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.72612Z","iopub.status.busy":"2025-09-02T10:14:22.72589Z","iopub.status.idle":"2025-09-02T10:14:22.731672Z","shell.execute_reply":"2025-09-02T10:14:22.731036Z"},"papermill":{"duration":0.030002,"end_time":"2025-09-02T10:14:22.732964","exception":false,"start_time":"2025-09-02T10:14:22.702962","status":"completed"},"tags":[]},"outputs":[],"source":["def gradient_boosting_F(X, y):\n","    max_depths = [2, 4, 10, 15]\n","    n_estimators_ = [100, 200, 500, 1000]\n","    min_samples_splits = [2, 5, 10]\n","\n","    best_score = np.inf\n","    best_params = {}\n","    \n","    #Using log(SalePrice) according to rules of kaggle house price competition\n","    log_y = np.log1p(y)\n","    for n_estimators in n_estimators_:\n","        for max_depth in max_depths:\n","            for min_samples_split in min_samples_splits:\n","                scores = []\n","                for fold in range(5):\n","                    xtrain = X.loc[X.kfold != fold].reset_index(drop=True)\n","                    ytrain = log_y.loc[X.kfold != fold].reset_index(drop=True)\n","                    xvalid = X.loc[X.kfold == fold].reset_index(drop=True)\n","                    yvalid = log_y.loc[X.kfold == fold].reset_index(drop=True)\n","\n","                    xtrain = cols_consider(xtrain)\n","                    xvalid = cols_consider(xvalid)\n","\n","                    model = GradientBoostingRegressor(n_estimators = n_estimators, min_samples_split = min_samples_split, max_depth = max_depth, random_state = fold)\n","                    model.fit(xtrain, ytrain)\n","                    preds_log = model.predict(xvalid)\n","                    #squared = False --> RMSE and squared = True --> MSE\n","                    rmse_score = metrics.mean_squared_error(yvalid, preds_log, squared = False)\n","                    scores.append(rmse_score)\n","                avg_score = float(np.mean(scores))\n","                if avg_score < best_score:  #Minimize RMSE\n","                    best_score = avg_score\n","                    best_params = {\"n_estimators\" : n_estimators, \"min_samples_split\" : min_samples_split, \"max_depth\" : max_depth}\n","    return best_score, best_params"]},{"cell_type":"markdown","id":"178a0880","metadata":{"papermill":{"duration":0.022506,"end_time":"2025-09-02T10:14:22.777553","exception":false,"start_time":"2025-09-02T10:14:22.755047","status":"completed"},"tags":[]},"source":["**3. XGBoost with Optuna**"]},{"cell_type":"code","execution_count":66,"id":"1adeb059","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.82276Z","iopub.status.busy":"2025-09-02T10:14:22.822529Z","iopub.status.idle":"2025-09-02T10:14:22.829698Z","shell.execute_reply":"2025-09-02T10:14:22.829044Z"},"papermill":{"duration":0.03104,"end_time":"2025-09-02T10:14:22.830791","exception":false,"start_time":"2025-09-02T10:14:22.799751","status":"completed"},"tags":[]},"outputs":[],"source":["def optimize_F(trial, X, y):\n","    #Hyperparameters\n","    params = {\n","        'n_estimators':trial.suggest_int('n_estimators', 200, 2000),\n","        'max_depth':trial.suggest_int('max_depth', 3, 20),\n","        'learning_rate':trial.suggest_float('learning_rate', 1e-4, 1e-1, log=True),\n","        'gamma':trial.suggest_float('gamma', 0, 10),\n","        'subsample':trial.suggest_float('subsample', 0.3, 1.0),\n","        'colsample_bytree':trial.suggest_float('colsample_bytree', 0.3, 1.0),\n","        'reg_alpha':trial.suggest_float('reg_alpha', 1e-4, 1e2, log=True),\n","        'reg_lambda':trial.suggest_float('reg_lambda', 1e-4, 1e2, log=True),\n","        'min_child_weight':trial.suggest_int('min_child_weight', 1, 10),\n","        'objective':\"reg:squarederror\",\n","        'eval_metric':\"rmse\",\n","        'use_label_encoder':False,\n","        #For GPU usage\n","        'tree_method':'gpu_hist',\n","        'gpu_id':0,\n","        'predictor':'gpu_predictor'\n","    }\n","\n","    scores = []\n","    #Using log(SalePrice) according to rules of kaggle house price competition\n","    log_y = np.log1p(y)\n","    for fold in range(5):\n","        xtrain = X.loc[X.kfold != fold].reset_index(drop=True)\n","        ytrain = log_y.loc[X.kfold != fold].reset_index(drop=True)\n","        xvalid = X.loc[X.kfold == fold].reset_index(drop=True)\n","        yvalid = log_y.loc[X.kfold == fold].reset_index(drop=True)\n","    \n","        xtrain = cols_consider(xtrain)\n","        xvalid = cols_consider(xvalid)\n","\n","        params['random_state'] = fold\n","        model = XGBRegressor(**params)\n","        model.fit(\n","            xtrain, ytrain,\n","            eval_set = [(xvalid, yvalid)],\n","            verbose = False,\n","            early_stopping_rounds = 200  #To prevent overfitting\n","        )\n","        preds_log = model.predict(xvalid)\n","        #squared = False --> RMSE and squared = True --> MSE\n","        rmse_score = metrics.mean_squared_error(yvalid, preds_log, squared = False)\n","        scores.append(rmse_score)\n","    return float(np.mean(scores))\n","\n","def tune_xgb_with_optuna_F(X, y, n_trials=50):\n","    study = optuna.create_study(direction=\"minimize\")\n","    study.optimize(lambda trial : optimize_F(trial, X, y), n_trials = n_trials)\n","    return study.best_params, study.best_value"]},{"cell_type":"code","execution_count":67,"id":"64053b01","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.8773Z","iopub.status.busy":"2025-09-02T10:14:22.877065Z","iopub.status.idle":"2025-09-02T10:14:22.881903Z","shell.execute_reply":"2025-09-02T10:14:22.881297Z"},"papermill":{"duration":0.030233,"end_time":"2025-09-02T10:14:22.883067","exception":false,"start_time":"2025-09-02T10:14:22.852834","status":"completed"},"tags":[]},"outputs":[],"source":["def final_test_preds_F(X, y, test, model):\n","    final_preds = []\n","    test_col = [col for col in test.columns if col not in [\"Id\",\"MoSold\"]]\n","\n","    #Using log(SalePrice) according to rules of kaggle house price competition\n","    y_log = np.log1p(y)\n","    for fold in range(5):\n","        xtrain = X.loc[X.kfold != fold]\n","        ytrain = y_log.loc[X.kfold != fold]\n","\n","        xtrain = cols_consider(xtrain)\n","        xtest = test.copy()\n","        xtest = xtest[test_col]\n","\n","        model.fit(xtrain, ytrain)\n","        test_preds_log = model.predict(xtest)\n","        #Converting back to original Saleprice values\n","        test_preds = np.expm1(test_preds_log)\n","        #To ensure all predictions >= 1 and no upper bound so None is used\n","        test_preds = np.clip(test_preds, 1.0, None)\n","        final_preds.append(test_preds)\n","\n","    test_predictions = np.mean(np.column_stack(final_preds), axis = 1)\n","    return test_predictions"]},{"cell_type":"code","execution_count":68,"id":"0fe6520f","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.928179Z","iopub.status.busy":"2025-09-02T10:14:22.927968Z","iopub.status.idle":"2025-09-02T10:14:22.931223Z","shell.execute_reply":"2025-09-02T10:14:22.930615Z"},"papermill":{"duration":0.027008,"end_time":"2025-09-02T10:14:22.93232","exception":false,"start_time":"2025-09-02T10:14:22.905312","status":"completed"},"tags":[]},"outputs":[],"source":["def submission_F(preds, sample_data):\n","    sample_data.SalePrice = preds\n","    sample_data.to_csv(\"submission_HP.csv\", index=False)\n","    print(\"Test predictions submitted successfully\")"]},{"cell_type":"code","execution_count":69,"id":"4f6d75f4","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:22.978644Z","iopub.status.busy":"2025-09-02T10:14:22.978404Z","iopub.status.idle":"2025-09-02T10:14:22.987509Z","shell.execute_reply":"2025-09-02T10:14:22.98692Z"},"papermill":{"duration":0.03359,"end_time":"2025-09-02T10:14:22.988698","exception":false,"start_time":"2025-09-02T10:14:22.955108","status":"completed"},"tags":[]},"outputs":[],"source":["#Different datasets corresponding to different encodings.\n","Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF = separate_F(df_train_oneCB_F, df_test_oneCB_F)\n","Xtrain_oneFEF, ytrain_oneFEF, test_oneFEF = separate_F(df_train_oneFE_F, df_test_oneFE_F)\n","Xtrain_catCBF, ytrain_catCBF, test_catCBF = separate_F(df_train_catCB_F, df_test_catCB_F)\n","Xtrain_catFEF, ytrain_catFEF, test_catFEF = separate_F(df_train_catFE_F, df_test_catFE_F)"]},{"cell_type":"markdown","id":"4e0186ce","metadata":{"papermill":{"duration":0.022223,"end_time":"2025-09-02T10:14:23.033903","exception":false,"start_time":"2025-09-02T10:14:23.01168","status":"completed"},"tags":[]},"source":["**1. Hyperparameter evaluation for Random Forest**"]},{"cell_type":"code","execution_count":70,"id":"af0b25ae","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.080091Z","iopub.status.busy":"2025-09-02T10:14:23.079818Z","iopub.status.idle":"2025-09-02T10:14:23.084493Z","shell.execute_reply":"2025-09-02T10:14:23.083821Z"},"papermill":{"duration":0.029159,"end_time":"2025-09-02T10:14:23.085769","exception":false,"start_time":"2025-09-02T10:14:23.05661","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["'\\n#Random Forest\\nbest_params_RF_oneCB, best_score_RF_oneCB = random_forest_F(Xtrain_oneCBF, ytrain_oneCBF)\\nbest_params_RF_oneFE, best_score_RF_oneFE = random_forest_F(Xtrain_oneFEF, ytrain_oneFEF)\\nbest_params_RF_catCB, best_score_RF_catCB = random_forest_F(Xtrain_catCBF, ytrain_catCBF)\\nbest_params_RF_catFE, best_score_RF_catFE = random_forest_F(Xtrain_catFEF, ytrain_catFEF)\\n\\nprint(best_params_RF_oneCB, best_score_RF_oneCB)\\nprint(best_params_RF_oneFE, best_score_RF_oneFE)\\nprint(best_params_RF_catCB, best_score_RF_catCB)\\nprint(best_params_RF_catFE, best_score_RF_catFE)\\n'"]},"execution_count":70,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","#Random Forest\n","best_params_RF_oneCB, best_score_RF_oneCB = random_forest_F(Xtrain_oneCBF, ytrain_oneCBF)\n","best_params_RF_oneFE, best_score_RF_oneFE = random_forest_F(Xtrain_oneFEF, ytrain_oneFEF)\n","best_params_RF_catCB, best_score_RF_catCB = random_forest_F(Xtrain_catCBF, ytrain_catCBF)\n","best_params_RF_catFE, best_score_RF_catFE = random_forest_F(Xtrain_catFEF, ytrain_catFEF)\n","\n","print(best_params_RF_oneCB, best_score_RF_oneCB)\n","print(best_params_RF_oneFE, best_score_RF_oneFE)\n","print(best_params_RF_catCB, best_score_RF_catCB)\n","print(best_params_RF_catFE, best_score_RF_catFE)\n","\"\"\""]},{"cell_type":"markdown","id":"f4b24201","metadata":{"papermill":{"duration":0.022449,"end_time":"2025-09-02T10:14:23.130552","exception":false,"start_time":"2025-09-02T10:14:23.108103","status":"completed"},"tags":[]},"source":["Obtained results for Random Forest are:\n","\n","1. One-Hot Encoding + CatBoost Encoding:\n","\n","{'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20} \n","0.13928647300582137\n","\n","2. One-Hot Encoding + Frequency Encoding:\n","\n","{'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20} \n","0.14161816096585028\n","\n","3. Categorical + CatBoost Encoding:\n","\n","{'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20} \n","0.13892462854400198\n","\n","4. Categorical + Frequency Encoding:\n","\n","{'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20} \n","0.14121224410920394\n","\n","\n","\n"]},{"cell_type":"markdown","id":"28129bc8","metadata":{"papermill":{"duration":0.022275,"end_time":"2025-09-02T10:14:23.17577","exception":false,"start_time":"2025-09-02T10:14:23.153495","status":"completed"},"tags":[]},"source":["**Since, best two performing encodings are Categorical + CatBoost Encoding and One-Hot Encoding + CatBoost Encoding, so lets consider their analysis on public leaderboard:-**"]},{"cell_type":"markdown","id":"0abfb018","metadata":{"papermill":{"duration":0.022998,"end_time":"2025-09-02T10:14:23.221282","exception":false,"start_time":"2025-09-02T10:14:23.198284","status":"completed"},"tags":[]},"source":["**1. Categorical + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting here. So, to generalize better tune the hyperparameters further."]},{"cell_type":"code","execution_count":71,"id":"53b81884","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.267144Z","iopub.status.busy":"2025-09-02T10:14:23.266889Z","iopub.status.idle":"2025-09-02T10:14:23.271245Z","shell.execute_reply":"2025-09-02T10:14:23.270531Z"},"papermill":{"duration":0.028886,"end_time":"2025-09-02T10:14:23.272563","exception":false,"start_time":"2025-09-02T10:14:23.243677","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'max_depth': 20, 'n_estimators': 300, 'min_samples_split': 2, 'random_state':68, 'n_jobs':-1}\\nmodel_ = RandomForestRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\\n\""]},"execution_count":71,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'max_depth': 20, 'n_estimators': 300, 'min_samples_split': 2, 'random_state':68, 'n_jobs':-1}\n","model_ = RandomForestRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"87b0824a","metadata":{"papermill":{"duration":0.022741,"end_time":"2025-09-02T10:14:23.317821","exception":false,"start_time":"2025-09-02T10:14:23.29508","status":"completed"},"tags":[]},"source":["On reducing n_estimators error reduced a lot on kaggle's public leaderboard as reducing n_estimators might have added an extra regularization (less averaging, more stochasticity via bootstrapping) so noise accumulation reduces due to less trees.\n","Hence, optimal hyperparameter obtained are :-\n","\n","{'n_estimators': 300, 'min_samples_split': 2, 'max_depth': 20} 0.1624322633"]},{"cell_type":"markdown","id":"64e6fd47","metadata":{"papermill":{"duration":0.023665,"end_time":"2025-09-02T10:14:23.363792","exception":false,"start_time":"2025-09-02T10:14:23.340127","status":"completed"},"tags":[]},"source":["**2. One-Hot Encoding + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting or having huge correlated trees or data leakage from CV. So, to generalize better-> tune hyperparamters to get to at/near bias-variance trade-off and obtain the optimal ones having least error on leaderboard."]},{"cell_type":"code","execution_count":72,"id":"9080fa54","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.414927Z","iopub.status.busy":"2025-09-02T10:14:23.41456Z","iopub.status.idle":"2025-09-02T10:14:23.419385Z","shell.execute_reply":"2025-09-02T10:14:23.418638Z"},"papermill":{"duration":0.031231,"end_time":"2025-09-02T10:14:23.420839","exception":false,"start_time":"2025-09-02T10:14:23.389608","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'max_depth': 20, 'n_estimators': 2000, 'min_samples_split': 2, 'random_state':68, 'n_jobs':-1}\\nmodel_ = RandomForestRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\\n\""]},"execution_count":72,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'max_depth': 20, 'n_estimators': 2000, 'min_samples_split': 2, 'random_state':68, 'n_jobs':-1}\n","model_ = RandomForestRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"10b1d1f2","metadata":{"papermill":{"duration":0.02365,"end_time":"2025-09-02T10:14:23.468232","exception":false,"start_time":"2025-09-02T10:14:23.444582","status":"completed"},"tags":[]},"source":["On increasing n_estimators error reduced on public leaderboard suggesting more trees average more bootstrapped trees → lower variance → better generalization (until it plateaus). Hence, optimal hyperparamter obtained are:\n","\n","{'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20} 0.1636970096"]},{"cell_type":"markdown","id":"d1602ddc","metadata":{"papermill":{"duration":0.023965,"end_time":"2025-09-02T10:14:23.516143","exception":false,"start_time":"2025-09-02T10:14:23.492178","status":"completed"},"tags":[]},"source":["**Best performance score on public leaderboard and corresponding hyperparameters:**\n","\n","**1. Categorical + CatBoost Encoding + Random Forest - 0.1624322633**\n","\n","{'n_estimators': 300, 'min_samples_split': 2, 'max_depth': 20, 'random_state':68, 'n_jobs':-1}\n","\n","**2. One-Hot Encoding + CatBoost Encoding + Random Forest - 0.1636970096**\n","\n","{'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20, 'random_state':68, 'n_jobs':-1} "]},{"cell_type":"markdown","id":"89d97e76","metadata":{"papermill":{"duration":0.022241,"end_time":"2025-09-02T10:14:23.562011","exception":false,"start_time":"2025-09-02T10:14:23.53977","status":"completed"},"tags":[]},"source":["**2. Hyperparamter evaluation for Gradient Boosting**"]},{"cell_type":"code","execution_count":73,"id":"03fcf4a9","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.608353Z","iopub.status.busy":"2025-09-02T10:14:23.608081Z","iopub.status.idle":"2025-09-02T10:14:23.612775Z","shell.execute_reply":"2025-09-02T10:14:23.612106Z"},"papermill":{"duration":0.02907,"end_time":"2025-09-02T10:14:23.614071","exception":false,"start_time":"2025-09-02T10:14:23.585001","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["'\\n#Gradient Boosting\\nbest_params_GB_oneCB, best_score_GB_oneCB = gradient_boosting_F(Xtrain_oneCBF, ytrain_oneCBF)\\nbest_params_GB_oneFE, best_score_GB_oneFE = gradient_boosting_F(Xtrain_oneFEF, ytrain_oneFEF)\\nbest_params_GB_catCB, best_score_GB_catCB = gradient_boosting_F(Xtrain_catCBF, ytrain_catCBF)\\nbest_params_GB_catFE, best_score_GB_catFE = gradient_boosting_F(Xtrain_catFEF, ytrain_catFEF)\\n\\nprint(best_params_GB_oneCB, best_score_GB_oneCB)\\nprint(best_params_GB_oneFE, best_score_GB_oneFE)\\nprint(best_params_GB_catCB, best_score_GB_catCB)\\nprint(best_params_GB_catFE, best_score_GB_catFE)\\n'"]},"execution_count":73,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","#Gradient Boosting\n","best_params_GB_oneCB, best_score_GB_oneCB = gradient_boosting_F(Xtrain_oneCBF, ytrain_oneCBF)\n","best_params_GB_oneFE, best_score_GB_oneFE = gradient_boosting_F(Xtrain_oneFEF, ytrain_oneFEF)\n","best_params_GB_catCB, best_score_GB_catCB = gradient_boosting_F(Xtrain_catCBF, ytrain_catCBF)\n","best_params_GB_catFE, best_score_GB_catFE = gradient_boosting_F(Xtrain_catFEF, ytrain_catFEF)\n","\n","print(best_params_GB_oneCB, best_score_GB_oneCB)\n","print(best_params_GB_oneFE, best_score_GB_oneFE)\n","print(best_params_GB_catCB, best_score_GB_catCB)\n","print(best_params_GB_catFE, best_score_GB_catFE)\n","\"\"\""]},{"cell_type":"markdown","id":"6703d2d9","metadata":{"papermill":{"duration":0.02375,"end_time":"2025-09-02T10:14:23.660766","exception":false,"start_time":"2025-09-02T10:14:23.637016","status":"completed"},"tags":[]},"source":["Obtained results for Gradient Boosting are:\n","\n","1. One-Hot Encoding + CatBoost Encoding:\n","\n","{'n_estimators': 200, 'min_samples_split': 2, 'max_depth': 2} 0.12931906881050365\n","\n","2. One-Hot Encoding + Frequency Encoding:\n","\n","{'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 4} 0.13073939846522784\n","\n","3. Categorical + CatBoost Encoding:\n","\n","{'n_estimators': 200, 'min_samples_split': 5, 'max_depth': 2} 0.12774631281442134\n","\n","4. Categorical + Frequency Encoding:\n","   \n","{'n_estimators': 200, 'min_samples_split': 2, 'max_depth': 4} 0.1294739942073392"]},{"cell_type":"markdown","id":"09565407","metadata":{"papermill":{"duration":0.022834,"end_time":"2025-09-02T10:14:23.707064","exception":false,"start_time":"2025-09-02T10:14:23.68423","status":"completed"},"tags":[]},"source":["**Since, best two performing encodings are Categorical + CatBoost Encoding and One-Hot Encoding + CatBoost Encoding, so lets consider their analysis on public leaderboard:-**"]},{"cell_type":"markdown","id":"082e14d2","metadata":{"papermill":{"duration":0.022766,"end_time":"2025-09-02T10:14:23.75315","exception":false,"start_time":"2025-09-02T10:14:23.730384","status":"completed"},"tags":[]},"source":["**1. Categorical + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting here. So, to tune the hyperparameters further to generalize better."]},{"cell_type":"code","execution_count":74,"id":"211ed50e","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.799097Z","iopub.status.busy":"2025-09-02T10:14:23.798854Z","iopub.status.idle":"2025-09-02T10:14:23.803109Z","shell.execute_reply":"2025-09-02T10:14:23.802461Z"},"papermill":{"duration":0.028702,"end_time":"2025-09-02T10:14:23.804318","exception":false,"start_time":"2025-09-02T10:14:23.775616","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'max_depth': 4, 'n_estimators': 500, 'min_samples_split': 3, 'random_state':38}\\nmodel_ = GradientBoostingRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\\n\""]},"execution_count":74,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'max_depth': 4, 'n_estimators': 500, 'min_samples_split': 3, 'random_state':38}\n","model_ = GradientBoostingRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"11040b6d","metadata":{"papermill":{"duration":0.022588,"end_time":"2025-09-02T10:14:23.849418","exception":false,"start_time":"2025-09-02T10:14:23.82683","status":"completed"},"tags":[]},"source":["On increasing n_estimators (more boosting steps, so lower bias), increasing max_depth (deeper trees) and decreasing min_samples_split (easier to split) led to stronger base learners so lower bias and higher variance that decreased the error further on kaggle's leaderboard. So, earlier model was underfitting or was weak, so increasing its capacity made it to generalize better. Hence, optimal hyperparameters obtained are:\n","\n","{'max_depth': 4, 'n_estimators': 500, 'min_samples_split': 3, 'random_state':38}  0.1403719067"]},{"cell_type":"markdown","id":"0cd35b3c","metadata":{"papermill":{"duration":0.022721,"end_time":"2025-09-02T10:14:23.89564","exception":false,"start_time":"2025-09-02T10:14:23.872919","status":"completed"},"tags":[]},"source":["**2. One-Hot Encoding + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting or having huge correlated trees or data leakage from CV. So, to generalize better-> tune hyperparamters to get to at/near bias-variance trade-off and obtain the optimal ones having least error on leaderboard."]},{"cell_type":"code","execution_count":75,"id":"e1ab47a2","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:23.942052Z","iopub.status.busy":"2025-09-02T10:14:23.941825Z","iopub.status.idle":"2025-09-02T10:14:23.946075Z","shell.execute_reply":"2025-09-02T10:14:23.945276Z"},"papermill":{"duration":0.029247,"end_time":"2025-09-02T10:14:23.947348","exception":false,"start_time":"2025-09-02T10:14:23.918101","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':38}\\nmodel_ = GradientBoostingRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\\n\""]},"execution_count":75,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':38}\n","model_ = GradientBoostingRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"4f9644ba","metadata":{"papermill":{"duration":0.022313,"end_time":"2025-09-02T10:14:23.993778","exception":false,"start_time":"2025-09-02T10:14:23.971465","status":"completed"},"tags":[]},"source":["On increasing n_estimators (more boosting steps, so lower bias) and increasing max_depth (deeper trees) led to lower bias and higher variance that decreased the error further on kaggle's leaderboard. So, earlier model was underfitting or was weak, so increasing its capacity made it to generalize better. Hence, optimal hyperparameters obtained are:\n","\n","{'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':38} 0.1376343758"]},{"cell_type":"markdown","id":"1161a5ef","metadata":{"papermill":{"duration":0.022375,"end_time":"2025-09-02T10:14:24.038907","exception":false,"start_time":"2025-09-02T10:14:24.016532","status":"completed"},"tags":[]},"source":["**Best performance score on public leaderboard and corresponding hyperparameters:**\n","\n","**1. Categorical + CatBoost Encoding + Gradient Boosting - 0.1403719067**\n","\n","{'max_depth': 4, 'n_estimators': 500, 'min_samples_split': 3, 'random_state':38}\n","\n","**2. One-Hot Encoding + CatBoost Encoding + Gradient Boosting - 0.1376343758**\n","\n","{'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':38} "]},{"cell_type":"markdown","id":"c071733c","metadata":{"papermill":{"duration":0.022611,"end_time":"2025-09-02T10:14:24.084132","exception":false,"start_time":"2025-09-02T10:14:24.061521","status":"completed"},"tags":[]},"source":["**3. Hyperparamter evaluation for XGBoost**"]},{"cell_type":"code","execution_count":76,"id":"e989f8a6","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:24.131107Z","iopub.status.busy":"2025-09-02T10:14:24.130785Z","iopub.status.idle":"2025-09-02T10:14:24.135385Z","shell.execute_reply":"2025-09-02T10:14:24.134581Z"},"papermill":{"duration":0.029742,"end_time":"2025-09-02T10:14:24.136615","exception":false,"start_time":"2025-09-02T10:14:24.106873","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["'\\n#XGBoost\\nbest_params_XGB_oneCB, best_score_XGB_oneCB = tune_xgb_with_optuna_F(Xtrain_oneCBF, ytrain_oneCBF)\\nbest_params_XGB_oneFE, best_score_XGB_oneFE = tune_xgb_with_optuna_F(Xtrain_oneFEF, ytrain_oneFEF)\\nbest_params_XGB_catCB, best_score_XGB_catCB = tune_xgb_with_optuna_F(Xtrain_catCBF, ytrain_catCBF)\\nbest_params_XGB_catFE, best_score_XGB_catFE = tune_xgb_with_optuna_F(Xtrain_catFEF, ytrain_catFEF)\\n\\nprint(best_params_XGB_oneCB, best_score_XGB_oneCB)\\nprint(best_params_XGB_oneFE, best_score_XGB_oneFE)\\nprint(best_params_XGB_catCB, best_score_XGB_catCB)\\nprint(best_params_XGB_catFE, best_score_XGB_catFE)\\n'"]},"execution_count":76,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","#XGBoost\n","best_params_XGB_oneCB, best_score_XGB_oneCB = tune_xgb_with_optuna_F(Xtrain_oneCBF, ytrain_oneCBF)\n","best_params_XGB_oneFE, best_score_XGB_oneFE = tune_xgb_with_optuna_F(Xtrain_oneFEF, ytrain_oneFEF)\n","best_params_XGB_catCB, best_score_XGB_catCB = tune_xgb_with_optuna_F(Xtrain_catCBF, ytrain_catCBF)\n","best_params_XGB_catFE, best_score_XGB_catFE = tune_xgb_with_optuna_F(Xtrain_catFEF, ytrain_catFEF)\n","\n","print(best_params_XGB_oneCB, best_score_XGB_oneCB)\n","print(best_params_XGB_oneFE, best_score_XGB_oneFE)\n","print(best_params_XGB_catCB, best_score_XGB_catCB)\n","print(best_params_XGB_catFE, best_score_XGB_catFE)\n","\"\"\""]},{"cell_type":"markdown","id":"ca733d34","metadata":{"papermill":{"duration":0.022889,"end_time":"2025-09-02T10:14:24.182352","exception":false,"start_time":"2025-09-02T10:14:24.159463","status":"completed"},"tags":[]},"source":["Obtained results for XGBoost are:\n","\n","1. One-Hot Encoding + CatBoost Encoding:\n","\n","{'n_estimators': 1643, 'max_depth': 3, 'learning_rate': 0.017470161366609775, 'gamma': 0.010786878137682115, 'subsample': 0.7579728984006315, 'colsample_bytree': 0.9529064489837247, 'reg_alpha': 0.5089829442189796, 'reg_lambda': 0.0008017810191995279, 'min_child_weight': 8}   0.12414062353093216\n","\n","2. One-Hot Encoding + Frequency Encoding:\n","\n","{'n_estimators': 1620, 'max_depth': 9, 'learning_rate': 0.09978964201934075, 'gamma': 0.050082247609691474, 'subsample': 0.8236913438904858, 'colsample_bytree': 0.649457180768749, 'reg_alpha': 0.00016546856603595562, 'reg_lambda': 3.9909068461086177, 'min_child_weight': 5}    0.13089023866555222\n","\n","3. Categorical + CatBoost Encoding:\n","\n","{'n_estimators': 1600, 'max_depth': 12, 'learning_rate': 0.06332418871249719, 'gamma': 0.02060073490790071, 'subsample': 0.49191422619095315, 'colsample_bytree': 0.46722346298556333, 'reg_alpha': 0.03481934224361396, 'reg_lambda': 10.530402799359877, 'min_child_weight': 3}    0.12477936016371963\n","\n","4. Categorical + Frequency Encoding:\n","\n","{'n_estimators': 1867, 'max_depth': 5, 'learning_rate': 0.06247593590220307, 'gamma': 0.02379747469358497, 'subsample': 0.87040677918606, 'colsample_bytree': 0.7853126534256554, 'reg_alpha': 0.05865789198688564, 'reg_lambda': 0.961353659048312, 'min_child_weight': 5}    0.13024065153128098"]},{"cell_type":"markdown","id":"a82f5fa4","metadata":{"papermill":{"duration":0.022493,"end_time":"2025-09-02T10:14:24.227693","exception":false,"start_time":"2025-09-02T10:14:24.2052","status":"completed"},"tags":[]},"source":["**Since, best two performing encodings are One-Hot Encoding + CatBoost Encoding and Categorical + CatBoost Encoding, so lets consider their analysis on public leaderboard:-**"]},{"cell_type":"markdown","id":"f4c8be97","metadata":{"papermill":{"duration":0.023683,"end_time":"2025-09-02T10:14:24.275026","exception":false,"start_time":"2025-09-02T10:14:24.251343","status":"completed"},"tags":[]},"source":["**1. One-Hot Encoding + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting here. So, to generalize better lets tune the hyperparameters further."]},{"cell_type":"code","execution_count":77,"id":"20bf13e3","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:24.32189Z","iopub.status.busy":"2025-09-02T10:14:24.321641Z","iopub.status.idle":"2025-09-02T10:14:24.326343Z","shell.execute_reply":"2025-09-02T10:14:24.325529Z"},"papermill":{"duration":0.029286,"end_time":"2025-09-02T10:14:24.327634","exception":false,"start_time":"2025-09-02T10:14:24.298348","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'n_estimators': 8000,\\n                       'max_depth': 2,\\n                       'learning_rate': 0.017470161366609775,\\n                       'gamma': 0.004786878137682115,\\n                       'subsample': 0.7579728984006315,\\n                       'colsample_bytree': 0.3529064489837247,\\n                       'reg_alpha': 0.3089829442189796,\\n                       'reg_lambda': 0.0001017810191995279,\\n                       'min_child_weight': 8,\\n                       #For GPU usage\\n                       'tree_method':'gpu_hist',\\n                       'gpu_id':0,\\n                       'predictor':'gpu_predictor',\\n                       'random_state':48\\n                      }\\nmodel_ = XGBRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\\n\""]},"execution_count":77,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'n_estimators': 8000,\n","                       'max_depth': 2,\n","                       'learning_rate': 0.017470161366609775,\n","                       'gamma': 0.004786878137682115,\n","                       'subsample': 0.7579728984006315,\n","                       'colsample_bytree': 0.3529064489837247,\n","                       'reg_alpha': 0.3089829442189796,\n","                       'reg_lambda': 0.0001017810191995279,\n","                       'min_child_weight': 8,\n","                       #For GPU usage\n","                       'tree_method':'gpu_hist',\n","                       'gpu_id':0,\n","                       'predictor':'gpu_predictor',\n","                       'random_state':48\n","                      }\n","model_ = XGBRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"333c0f0e","metadata":{"papermill":{"duration":0.022454,"end_time":"2025-09-02T10:14:24.372815","exception":false,"start_time":"2025-09-02T10:14:24.350361","status":"completed"},"tags":[]},"source":["Following changes to hyperparameters reduced error much further on leaderboard:\n","\n","- Increasing n_estimators led to increased capacity and lower bias, so with a tiny learning_rate, trees now converge better and fit residuals better.\n","- Decreasing max_depth led to shallower trees which restricted interactions and reduced overfitting, which was then compensated by adding more trees.\n","- Decreasing colsample_bytree decorrelated trees and improved generalization especially with many one-hot encoded features.\n","- We reduced gamma and reg_lambda and kept them as well as reg_alpha very low close to 0, so it led to looser penalties and more rounds so less bias and kept min_child_weight, depth + row/col subsampling high to block fragile splits with too little samples, so variance kept in-check and no overfitting now.\n","\n","Hence, optimal hyperparameters obtained are:\n","\n","{'n_estimators': 8000,'max_depth': 2,'learning_rate': 0.017470161366609775,'gamma': 0.004786878137682115,'subsample': 0.7579728984006315,'colsample_bytree': 0.3529064489837247,'reg_alpha': 0.3089829442189796,'reg_lambda': 0.0001017810191995279,'min_child_weight': 8,'random_state':48}  0.1365655967"]},{"cell_type":"markdown","id":"d87764b9","metadata":{"papermill":{"duration":0.022759,"end_time":"2025-09-02T10:14:24.418837","exception":false,"start_time":"2025-09-02T10:14:24.396078","status":"completed"},"tags":[]},"source":["**2. Categorical + CatBoost Encoding**\n","\n","On submitting, it is observed that the cross validation scores are higher than that obtained on public leaderboard, so the model might be overfitting/underfitting here. So, to generalize better lets tune the hyperparameters further."]},{"cell_type":"code","execution_count":78,"id":"ee294b16","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:24.464993Z","iopub.status.busy":"2025-09-02T10:14:24.464745Z","iopub.status.idle":"2025-09-02T10:14:24.4691Z","shell.execute_reply":"2025-09-02T10:14:24.468427Z"},"papermill":{"duration":0.028733,"end_time":"2025-09-02T10:14:24.47013","exception":false,"start_time":"2025-09-02T10:14:24.441397","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\nbest_params_submit_ = {'n_estimators': 2500,\\n                       'max_depth': 9,\\n                       'learning_rate': 0.00932418871249719,\\n                       'gamma': 0.00960073490790071, \\n                       'subsample': 0.19191422619095315, \\n                       'colsample_bytree': 0.46722346298556333,\\n                       'reg_alpha': 0.01481934224361396,\\n                       'reg_lambda': 0.130402799359877,\\n                       'min_child_weight': 5,\\n                       #For GPU usage\\n                       'tree_method':'gpu_hist',\\n                       'gpu_id':0,\\n                       'predictor':'gpu_predictor',\\n                       'random_state':84\\n                      }\\nmodel_ = XGBRegressor(**best_params_submit_)\\nsubmission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\\n\""]},"execution_count":78,"metadata":{},"output_type":"execute_result"}],"source":["\"\"\"\n","best_params_submit_ = {'n_estimators': 2500,\n","                       'max_depth': 9,\n","                       'learning_rate': 0.00932418871249719,\n","                       'gamma': 0.00960073490790071, \n","                       'subsample': 0.19191422619095315, \n","                       'colsample_bytree': 0.46722346298556333,\n","                       'reg_alpha': 0.01481934224361396,\n","                       'reg_lambda': 0.130402799359877,\n","                       'min_child_weight': 5,\n","                       #For GPU usage\n","                       'tree_method':'gpu_hist',\n","                       'gpu_id':0,\n","                       'predictor':'gpu_predictor',\n","                       'random_state':84\n","                      }\n","model_ = XGBRegressor(**best_params_submit_)\n","submission_F(final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, model_).astype(int), submission_)\n","\"\"\""]},{"cell_type":"markdown","id":"9f67a0d5","metadata":{"papermill":{"duration":0.023026,"end_time":"2025-09-02T10:14:24.516082","exception":false,"start_time":"2025-09-02T10:14:24.493056","status":"completed"},"tags":[]},"source":["Following changes to hyperparameters reduced error much further on leaderboard:\n","\n","- Increasing n_estimators (more trees) and decreasing learning_rate led to smoother fit and less overfitting.\n","- Increasing min_child_weight while decreasing max_depth (shallower trees) led to regularized interactions, so now need more samples in a child before splitting. This prunes away spurious splits that fit noise. The model captures broad trends rather than memorizing rare cases.\n","- Reducing subsample heavily allow trees to only look 19% of the rows at a time which introduce heavy randomness that de-correlate trees. This proved helpful in such an overfit-prone dataset of House Price.\n","- Lowering reg_alpha, reg_lambda and gamma, gave model flexibility to fit useful patterns and with heavy randomness and shallower trees, this flexibility didnot explode into overfit.\n","\n","Hence, optimal hyperparameters obtained are:\n","\n","{'n_estimators': 2500,'max_depth': 9,'learning_rate': 0.00932418871249719,'gamma': 0.00960073490790071,'subsample': 0.19191422619095315,'colsample_bytree': 0.46722346298556333,'reg_alpha': 0.01481934224361396,'reg_lambda': 0.130402799359877,'min_child_weight': 5,'random_state': 84}  0.1339036213"]},{"cell_type":"markdown","id":"061befef","metadata":{"papermill":{"duration":0.02283,"end_time":"2025-09-02T10:14:24.561896","exception":false,"start_time":"2025-09-02T10:14:24.539066","status":"completed"},"tags":[]},"source":["**Best performance score on public leaderboard and corresponding hyperparameters:**\n","\n","**1. Categorical + CatBoost Encoding + XGBoost - 0.1339036213**\n","\n","{'n_estimators': 2500,'max_depth': 9,'learning_rate': 0.00932418871249719,'gamma': 0.00960073490790071,'subsample': 0.19191422619095315,'colsample_bytree': 0.46722346298556333,'reg_alpha': 0.01481934224361396,'reg_lambda': 0.130402799359877,'min_child_weight': 5,'random_state':84}\n","\n","**2. One-Hot Encoding + CatBoost Encoding + XGBoost - 0.1365655967**\n","\n","{'n_estimators': 8000,'max_depth': 2,'learning_rate': 0.017470161366609775,'gamma': 0.004786878137682115,'subsample': 0.7579728984006315,'colsample_bytree': 0.3529064489837247,'reg_alpha': 0.3089829442189796,'reg_lambda': 0.0001017810191995279,'min_child_weight': 8,'random_state':48}"]},{"cell_type":"markdown","id":"bcffdc8e","metadata":{"papermill":{"duration":0.022623,"end_time":"2025-09-02T10:14:24.607394","exception":false,"start_time":"2025-09-02T10:14:24.584771","status":"completed"},"tags":[]},"source":["# Best Performing Model-Encoding Pairs"]},{"cell_type":"markdown","id":"0f9d14dd","metadata":{"papermill":{"duration":0.023305,"end_time":"2025-09-02T10:14:24.65348","exception":false,"start_time":"2025-09-02T10:14:24.630175","status":"completed"},"tags":[]},"source":["**From the above observations, top 3 model+encoding pair that achieved best score on public leaderboard are:**\n","\n","**1. Categorical + CatBoost Encoding + XGBoost - 0.1339036213**\n","\n","{'n_estimators': 2500,'max_depth': 9,'learning_rate': 0.00932418871249719,'gamma': 0.00960073490790071,'subsample': 0.19191422619095315,'colsample_bytree': 0.46722346298556333,'reg_alpha': 0.01481934224361396,'reg_lambda': 0.130402799359877,'min_child_weight': 5,'random_state':84}\n","\n","**2. One-Hot Encoding + CatBoost Encoding + XGBoost - 0.1365655967**\n","\n","{'n_estimators': 8000,'max_depth': 2,'learning_rate': 0.017470161366609775,'gamma': 0.004786878137682115,'subsample': 0.7579728984006315,'colsample_bytree': 0.3529064489837247,'reg_alpha': 0.3089829442189796,'reg_lambda': 0.0001017810191995279,'min_child_weight': 8,'random_state':48}\n","\n","**3. One-Hot Encoding + CatBoost Encoding + Gradient Boosting - 0.1376343758**\n","\n","{'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':38}"]},{"cell_type":"markdown","id":"d8bf1511","metadata":{"papermill":{"duration":0.022687,"end_time":"2025-09-02T10:14:24.699053","exception":false,"start_time":"2025-09-02T10:14:24.676366","status":"completed"},"tags":[]},"source":["# Final Submission"]},{"cell_type":"code","execution_count":79,"id":"8a3ed1c1","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:14:24.746269Z","iopub.status.busy":"2025-09-02T10:14:24.746008Z","iopub.status.idle":"2025-09-02T10:16:43.076816Z","shell.execute_reply":"2025-09-02T10:16:43.075898Z"},"papermill":{"duration":138.379008,"end_time":"2025-09-02T10:16:43.100891","exception":false,"start_time":"2025-09-02T10:14:24.721883","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Test predictions submitted successfully\n"]}],"source":["\n","#Top 3 best performing regressors on public leaderboard\n","#1. Categorical + CatBoost Encoding + XGBoost\n","best_params_1 = {'n_estimators': 2500,\n","                 'max_depth': 9,\n","                 'learning_rate': 0.00932418871249719,\n","                 'gamma': 0.00960073490790071, \n","                 'subsample': 0.19191422619095315, \n","                 'colsample_bytree': 0.46722346298556333,\n","                 'reg_alpha': 0.01481934224361396,\n","                 'reg_lambda': 0.130402799359877,\n","                 'min_child_weight': 5,\n","                 #For GPU usage\n","                 'tree_method':'gpu_hist',\n","                 'gpu_id':0,\n","                 'predictor':'gpu_predictor',\n","                 'random_state':648\n","                }\n","regressor_1 = XGBRegressor(**best_params_1)\n","#2. One-Hot Encoding + CatBoost Encoding + XGBoost\n","best_params_2 = {'n_estimators': 8000,\n","                 'max_depth': 2,\n","                 'learning_rate': 0.017470161366609775,\n","                 'gamma': 0.004786878137682115,\n","                 'subsample': 0.7579728984006315,\n","                 'colsample_bytree': 0.3529064489837247,\n","                 'reg_alpha': 0.3089829442189796,\n","                 'reg_lambda': 0.0001017810191995279,\n","                 'min_child_weight': 8,\n","                 #For GPU usage\n","                 'tree_method':'gpu_hist',\n","                 'gpu_id':0,\n","                 'predictor':'gpu_predictor',\n","                 'random_state':888\n","                }\n","regressor_2 = XGBRegressor(**best_params_2)\n","#3. One-Hot Encoding + CatBoost Encoding + Gradient Boosting\n","best_params_3 = {'max_depth': 4, 'n_estimators': 1300, 'min_samples_split': 2, 'random_state':388}\n","regressor_3 = GradientBoostingRegressor(**best_params_3)\n","\n","#Predictions correspoding to top 3 best performing regressors on public leaderboard\n","#Casting prediction to int hurt RMSE, so don't do .astype(int)\n","prediction_1_ = final_test_preds_F(Xtrain_catCBF, ytrain_catCBF, test_catCBF, regressor_1)\n","prediction_2_ = final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, regressor_2)\n","prediction_3_ = final_test_preds_F(Xtrain_oneCBF, ytrain_oneCBF, test_oneCBF, regressor_3)\n","\n","#Final prediction as mean of all predictions\n","# Geometric mean (equivalent to mean in log space) — usually better for House Prices\n","#No need to round prices to int as kaggle can handle floats\n","stack = np.column_stack([prediction_1_, prediction_2_, prediction_3_])\n","final_prediction_ = np.expm1(np.mean(np.log1p(stack), axis = 1))\n","final_prediction_ = np.clip(final_prediction_, 1.0, None)\n","\n","#Final submission\n","submission_F(final_prediction_, submission_)"]},{"cell_type":"code","execution_count":80,"id":"6bc1f157","metadata":{"execution":{"iopub.execute_input":"2025-09-02T10:16:43.147783Z","iopub.status.busy":"2025-09-02T10:16:43.147509Z","iopub.status.idle":"2025-09-02T10:16:43.163505Z","shell.execute_reply":"2025-09-02T10:16:43.162643Z"},"papermill":{"duration":0.040956,"end_time":"2025-09-02T10:16:43.164846","exception":false,"start_time":"2025-09-02T10:16:43.12389","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1461</td>\n","      <td>122984.075296</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1462</td>\n","      <td>159091.052191</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1463</td>\n","      <td>189253.031880</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1464</td>\n","      <td>194072.968544</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1465</td>\n","      <td>188285.162453</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1454</th>\n","      <td>2915</td>\n","      <td>79691.430934</td>\n","    </tr>\n","    <tr>\n","      <th>1455</th>\n","      <td>2916</td>\n","      <td>80429.239245</td>\n","    </tr>\n","    <tr>\n","      <th>1456</th>\n","      <td>2917</td>\n","      <td>163968.762348</td>\n","    </tr>\n","    <tr>\n","      <th>1457</th>\n","      <td>2918</td>\n","      <td>122434.900615</td>\n","    </tr>\n","    <tr>\n","      <th>1458</th>\n","      <td>2919</td>\n","      <td>209238.293742</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1459 rows × 2 columns</p>\n","</div>"],"text/plain":["        Id      SalePrice\n","0     1461  122984.075296\n","1     1462  159091.052191\n","2     1463  189253.031880\n","3     1464  194072.968544\n","4     1465  188285.162453\n","...    ...            ...\n","1454  2915   79691.430934\n","1455  2916   80429.239245\n","1456  2917  163968.762348\n","1457  2918  122434.900615\n","1458  2919  209238.293742\n","\n","[1459 rows x 2 columns]"]},"execution_count":80,"metadata":{},"output_type":"execute_result"}],"source":["\n","see_output = pd.read_csv(\"/kaggle/working/submission_HP.csv\")\n","see_output\n"]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"databundleVersionId":111096,"sourceId":10211,"sourceType":"competition"},{"sourceId":255804578,"sourceType":"kernelVersion"}],"dockerImageVersionId":30822,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":309.45087,"end_time":"2025-09-02T10:16:45.807669","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-02T10:11:36.356799","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}